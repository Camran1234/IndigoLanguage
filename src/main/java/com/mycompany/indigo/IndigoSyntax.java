
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.indigo;

import com.mycompany.handlers.ComponentCommands;
import com.mycompany.handlers.FormCommands;
import com.mycompany.handlers.UserCommands;
import java.text.SimpleDateFormat;
import com.mycompany.indigo.*;
import java.util.Date;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class IndigoSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symIndigo.class;
}

  /** Default constructor. */
  @Deprecated
  public IndigoSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public IndigoSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public IndigoSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\005\000\002\005\005\000\002\005\003" +
    "\000\002\005\004\000\002\006\005\000\002\006\002\000" +
    "\002\051\010\000\002\007\010\000\002\010\010\000\002" +
    "\011\010\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\014\004\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\005\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\005\000\002\016\005" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\004\000\002\017\004\000\002\020\005\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\021\004\000\002\022\005\000\002\023\006" +
    "\000\002\023\004\000\002\023\004\000\002\024\005\000" +
    "\002\025\006\000\002\025\006\000\002\025\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\027\005\000\002\027\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\004\000\002\030\005\000\002" +
    "\030\004\000\002\031\005\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\004" +
    "\000\002\033\005\000\002\052\006\000\002\052\004\000" +
    "\002\052\005\000\002\034\005\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\004\000\002\040\003\000\002\040\004\000" +
    "\002\040\005\000\002\040\004\000\002\037\004\000\002" +
    "\037\003\000\002\037\004\000\002\037\005\000\002\037" +
    "\004\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\004\000\002" +
    "\042\005\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\006" +
    "\000\002\043\006\000\002\043\006\000\002\043\006\000" +
    "\002\043\006\000\002\043\006\000\002\043\004\000\002" +
    "\044\005\000\002\045\006\000\002\045\005\000\002\045" +
    "\004\000\002\046\005\000\002\047\006\000\002\047\006" +
    "\000\002\047\006\000\002\047\006\000\002\047\006\000" +
    "\002\047\006\000\002\047\006\000\002\047\006\000\002" +
    "\047\006\000\002\047\006\000\002\047\006\000\002\047" +
    "\004\000\002\050\003\000\002\050\003\000\002\050\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\010\002\ufff9\003\004\065\005\001\002\000" +
    "\004\065\167\001\002\000\006\004\u015c\006\064\001\002" +
    "\000\004\065\061\001\002\000\026\017\021\020\033\021" +
    "\042\022\030\023\027\024\022\025\013\032\035\033\024" +
    "\034\014\001\002\000\004\002\012\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\066\354" +
    "\001\002\000\004\066\074\001\002\000\006\002\ufff9\065" +
    "\061\001\002\000\006\002\uffcb\065\uffcb\001\002\000\006" +
    "\002\uffb0\065\uffb0\001\002\000\006\002\uffcc\065\uffcc\001" +
    "\002\000\004\066\043\001\002\000\004\066\354\001\002" +
    "\000\006\002\uff7c\065\uff7c\001\002\000\004\066\074\001" +
    "\002\000\006\002\ufff4\065\ufff4\001\002\000\006\002\uffaf" +
    "\065\uffaf\001\002\000\004\066\354\001\002\000\004\066" +
    "\043\001\002\000\006\002\uff7b\065\uff7b\001\002\000\006" +
    "\002\ufff3\065\ufff3\001\002\000\004\066\043\001\002\000" +
    "\006\002\ufff2\065\ufff2\001\002\000\004\066\074\001\002" +
    "\000\006\002\uffae\065\uffae\001\002\000\006\002\uffcd\065" +
    "\uffcd\001\002\000\006\002\uffce\065\uffce\001\002\000\006" +
    "\002\uff7a\065\uff7a\001\002\000\004\066\043\001\002\000" +
    "\004\070\066\001\002\000\006\003\045\011\046\001\002" +
    "\000\010\002\ufff9\065\061\071\052\001\002\000\004\067" +
    "\050\001\002\000\006\002\uffd6\065\uffd6\001\002\000\004" +
    "\060\051\001\002\000\004\071\052\001\002\000\004\073" +
    "\054\001\002\000\006\002\uffd5\065\uffd5\001\002\000\004" +
    "\071\055\001\002\000\004\065\056\001\002\000\004\007" +
    "\057\001\002\000\004\066\060\001\002\000\014\002\ufff7" +
    "\003\ufff7\064\ufff7\065\ufff7\071\ufff7\001\002\000\004\006" +
    "\064\001\002\000\006\002\uffd4\065\uffd4\001\002\000\006" +
    "\002\uffd3\065\uffd3\001\002\000\004\067\065\001\002\000" +
    "\026\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\032\ufffe\033\ufffe\034\ufffe\001\002\000\004\010" +
    "\067\001\002\000\004\067\070\001\002\000\004\072\071" +
    "\001\002\000\004\070\072\001\002\000\020\003\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\001\002" +
    "\000\032\003\113\027\110\036\105\037\103\040\116\041" +
    "\114\052\102\053\107\054\115\055\111\056\112\075\104" +
    "\001\002\000\004\070\075\001\002\000\004\035\076\001" +
    "\002\000\004\067\077\001\002\000\004\072\100\001\002" +
    "\000\004\070\101\001\002\000\032\003\ufff5\027\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\075\ufff5\001\002\000\004\067\271\001" +
    "\002\000\004\067\266\001\002\000\004\067\263\001\002" +
    "\000\004\067\260\001\002\000\006\002\uff9a\065\uff9a\001" +
    "\002\000\004\067\255\001\002\000\004\067\252\001\002" +
    "\000\004\067\247\001\002\000\004\067\244\001\002\000" +
    "\010\003\133\064\132\071\052\001\002\000\004\067\240" +
    "\001\002\000\004\067\235\001\002\000\004\067\117\001" +
    "\002\000\024\003\126\042\125\043\120\044\130\045\124" +
    "\046\121\047\131\050\127\051\122\001\002\000\010\003" +
    "\uffa2\064\uffa2\071\uffa2\001\002\000\010\003\uff9f\064\uff9f" +
    "\071\uff9f\001\002\000\010\003\uff9c\064\uff9c\071\uff9c\001" +
    "\002\000\010\003\133\064\132\071\052\001\002\000\010" +
    "\003\uffa0\064\uffa0\071\uffa0\001\002\000\010\003\uffa3\064" +
    "\uffa3\071\uffa3\001\002\000\010\003\133\064\132\071\052" +
    "\001\002\000\010\003\uff9d\064\uff9d\071\uff9d\001\002\000" +
    "\010\003\uffa1\064\uffa1\071\uffa1\001\002\000\010\003\uff9e" +
    "\064\uff9e\071\uff9e\001\002\000\032\003\151\027\143\036" +
    "\137\037\144\040\140\041\146\052\145\053\154\054\152" +
    "\055\153\056\141\075\147\001\002\000\036\003\151\027" +
    "\143\036\137\037\144\040\140\041\146\052\145\053\154" +
    "\054\152\055\153\056\141\065\061\071\052\075\147\001" +
    "\002\000\014\002\uffa7\003\uffa7\064\uffa7\065\uffa7\071\uffa7" +
    "\001\002\000\010\003\uff9b\064\uff9b\071\uff9b\001\002\000" +
    "\014\002\uffa4\003\uffa4\064\uffa4\065\uffa4\071\uffa4\001\002" +
    "\000\004\067\230\001\002\000\004\067\225\001\002\000" +
    "\004\067\222\001\002\000\004\065\167\001\002\000\004" +
    "\067\216\001\002\000\004\067\213\001\002\000\004\067" +
    "\210\001\002\000\004\067\205\001\002\000\004\067\202" +
    "\001\002\000\014\002\uffa6\003\uffa6\064\uffa6\065\uffa6\071" +
    "\uffa6\001\002\000\010\003\160\064\157\071\052\001\002" +
    "\000\004\067\176\001\002\000\004\067\173\001\002\000" +
    "\004\067\155\001\002\000\004\057\156\001\002\000\010" +
    "\003\160\064\157\071\052\001\002\000\032\003\151\027" +
    "\143\036\137\037\144\040\140\041\146\052\145\053\154" +
    "\054\152\055\153\056\141\075\147\001\002\000\036\003" +
    "\151\027\143\036\137\037\144\040\140\041\146\052\145" +
    "\053\154\054\152\055\153\056\141\065\061\071\052\075" +
    "\147\001\002\000\014\002\uff84\003\uff84\064\uff84\065\uff84" +
    "\071\uff84\001\002\000\014\002\uffac\003\uffac\064\uffac\065" +
    "\uffac\071\uffac\001\002\000\014\002\uffa9\003\uffa9\064\uffa9" +
    "\065\uffa9\071\uffa9\001\002\000\004\065\167\001\002\000" +
    "\014\002\uffab\003\uffab\064\uffab\065\uffab\071\uffab\001\002" +
    "\000\014\002\uffaa\003\uffaa\064\uffaa\065\uffaa\071\uffaa\001" +
    "\002\000\004\005\170\001\002\000\004\066\171\001\002" +
    "\000\014\002\uffff\003\uffff\064\uffff\065\uffff\071\uffff\001" +
    "\002\000\014\002\uffad\003\uffad\064\uffad\065\uffad\071\uffad" +
    "\001\002\000\004\060\174\001\002\000\010\003\160\064" +
    "\157\071\052\001\002\000\014\002\uff7f\003\uff7f\064\uff7f" +
    "\065\uff7f\071\uff7f\001\002\000\004\060\177\001\002\000" +
    "\010\003\160\064\157\071\052\001\002\000\014\002\uff80" +
    "\003\uff80\064\uff80\065\uff80\071\uff80\001\002\000\014\002" +
    "\uff7d\003\uff7d\064\uff7d\065\uff7d\071\uff7d\001\002\000\004" +
    "\063\203\001\002\000\010\003\160\064\157\071\052\001" +
    "\002\000\014\002\uff82\003\uff82\064\uff82\065\uff82\071\uff82" +
    "\001\002\000\004\057\206\001\002\000\010\003\160\064" +
    "\157\071\052\001\002\000\014\002\uff83\003\uff83\064\uff83" +
    "\065\uff83\071\uff83\001\002\000\004\062\211\001\002\000" +
    "\010\003\160\064\157\071\052\001\002\000\014\002\uff81" +
    "\003\uff81\064\uff81\065\uff81\071\uff81\001\002\000\004\060" +
    "\214\001\002\000\010\003\160\064\157\071\052\001\002" +
    "\000\014\002\uff86\003\uff86\064\uff86\065\uff86\071\uff86\001" +
    "\002\000\004\060\217\001\002\000\010\003\160\064\157" +
    "\071\052\001\002\000\014\002\uff88\003\uff88\064\uff88\065" +
    "\uff88\071\uff88\001\002\000\014\002\uffa5\003\uffa5\064\uffa5" +
    "\065\uffa5\071\uffa5\001\002\000\004\057\223\001\002\000" +
    "\010\003\160\064\157\071\052\001\002\000\014\002\uff7e" +
    "\003\uff7e\064\uff7e\065\uff7e\071\uff7e\001\002\000\024\003" +
    "\126\042\125\043\120\044\130\045\124\046\121\047\131" +
    "\050\127\051\122\001\002\000\010\003\160\064\157\071" +
    "\052\001\002\000\014\002\uff85\003\uff85\064\uff85\065\uff85" +
    "\071\uff85\001\002\000\004\057\231\001\002\000\010\003" +
    "\160\064\157\071\052\001\002\000\014\002\uff87\003\uff87" +
    "\064\uff87\065\uff87\071\uff87\001\002\000\014\002\uffa8\003" +
    "\uffa8\064\uffa8\065\uffa8\071\uffa8\001\002\000\006\002\uff96" +
    "\065\uff96\001\002\000\004\060\236\001\002\000\010\003" +
    "\133\064\132\071\052\001\002\000\006\002\uff91\065\uff91" +
    "\001\002\000\004\057\241\001\002\000\010\003\133\064" +
    "\132\071\052\001\002\000\006\002\uff94\065\uff94\001\002" +
    "\000\006\002\uff8e\065\uff8e\001\002\000\004\057\245\001" +
    "\002\000\010\003\133\064\132\071\052\001\002\000\006" +
    "\002\uff8f\065\uff8f\001\002\000\004\060\250\001\002\000" +
    "\010\003\133\064\132\071\052\001\002\000\006\002\uff90" +
    "\065\uff90\001\002\000\004\060\253\001\002\000\010\003" +
    "\133\064\132\071\052\001\002\000\006\002\uff99\065\uff99" +
    "\001\002\000\004\057\256\001\002\000\010\003\133\064" +
    "\132\071\052\001\002\000\006\002\uff95\065\uff95\001\002" +
    "\000\004\057\261\001\002\000\010\003\133\064\132\071" +
    "\052\001\002\000\006\002\uff98\065\uff98\001\002\000\004" +
    "\063\264\001\002\000\010\003\133\064\132\071\052\001" +
    "\002\000\006\002\uff93\065\uff93\001\002\000\004\060\267" +
    "\001\002\000\010\003\133\064\132\071\052\001\002\000" +
    "\006\002\uff97\065\uff97\001\002\000\004\062\272\001\002" +
    "\000\010\003\133\064\132\071\052\001\002\000\006\002" +
    "\uff92\065\uff92\001\002\000\014\003\276\013\301\014\275" +
    "\015\302\016\300\001\002\000\004\067\325\001\002\000" +
    "\010\003\306\064\305\071\052\001\002\000\006\002\uffdc" +
    "\065\uffdc\001\002\000\004\067\321\001\002\000\004\067" +
    "\316\001\002\000\004\067\303\001\002\000\004\060\304" +
    "\001\002\000\010\003\306\064\305\071\052\001\002\000" +
    "\014\003\276\013\301\014\275\015\302\016\300\001\002" +
    "\000\020\003\276\013\301\014\275\015\302\016\300\065" +
    "\061\071\052\001\002\000\006\002\uffeb\065\uffeb\001\002" +
    "\000\006\002\uffda\065\uffda\001\002\000\006\002\uffe9\065" +
    "\uffe9\001\002\000\004\065\167\001\002\000\006\002\uffea" +
    "\065\uffea\001\002\000\006\002\uffe8\065\uffe8\001\002\000" +
    "\006\002\uffec\065\uffec\001\002\000\004\060\317\001\002" +
    "\000\010\003\306\064\305\071\052\001\002\000\006\002" +
    "\uffd8\065\uffd8\001\002\000\004\060\322\001\002\000\010" +
    "\003\306\064\305\071\052\001\002\000\006\002\uffd9\065" +
    "\uffd9\001\002\000\006\002\uffd7\065\uffd7\001\002\000\004" +
    "\060\326\001\002\000\010\003\306\064\305\071\052\001" +
    "\002\000\006\002\uffdb\065\uffdb\001\002\000\010\003\331" +
    "\011\332\012\334\001\002\000\010\003\340\064\337\071" +
    "\052\001\002\000\004\067\350\001\002\000\006\002\uffd2" +
    "\065\uffd2\001\002\000\004\067\335\001\002\000\004\060" +
    "\336\001\002\000\010\003\340\064\337\071\052\001\002" +
    "\000\010\003\331\011\332\012\334\001\002\000\014\003" +
    "\331\011\332\012\334\065\061\071\052\001\002\000\006" +
    "\002\uffe6\065\uffe6\001\002\000\006\002\uffd0\065\uffd0\001" +
    "\002\000\004\065\167\001\002\000\006\002\uffe4\065\uffe4" +
    "\001\002\000\006\002\uffe5\065\uffe5\001\002\000\006\002" +
    "\uffe3\065\uffe3\001\002\000\006\002\uffe7\065\uffe7\001\002" +
    "\000\004\060\351\001\002\000\010\003\340\064\337\071" +
    "\052\001\002\000\006\002\uffd1\065\uffd1\001\002\000\006" +
    "\002\uffcf\065\uffcf\001\002\000\004\070\u0109\001\002\000" +
    "\014\003\361\027\356\030\360\031\362\074\363\001\002" +
    "\000\004\067\u0106\001\002\000\006\002\uffc0\065\uffc0\001" +
    "\002\000\004\067\u0103\001\002\000\010\003\367\064\366" +
    "\071\052\001\002\000\004\067\377\001\002\000\004\067" +
    "\364\001\002\000\004\057\365\001\002\000\010\003\367" +
    "\064\366\071\052\001\002\000\014\003\361\027\356\030" +
    "\360\031\362\074\363\001\002\000\020\003\361\027\356" +
    "\030\360\031\362\065\061\071\052\074\363\001\002\000" +
    "\006\002\uffbe\065\uffbe\001\002\000\006\002\uffc9\065\uffc9" +
    "\001\002\000\004\065\167\001\002\000\006\002\uffc6\065" +
    "\uffc6\001\002\000\006\002\uffc8\065\uffc8\001\002\000\006" +
    "\002\uffc7\065\uffc7\001\002\000\006\002\uffca\065\uffca\001" +
    "\002\000\004\060\u0100\001\002\000\010\003\367\064\366" +
    "\071\052\001\002\000\006\002\uffbd\065\uffbd\001\002\000" +
    "\006\002\uffbb\065\uffbb\001\002\000\004\057\u0104\001\002" +
    "\000\010\003\367\064\366\071\052\001\002\000\006\002" +
    "\uffbc\065\uffbc\001\002\000\004\060\u0107\001\002\000\010" +
    "\003\367\064\366\071\052\001\002\000\006\002\uffbf\065" +
    "\uffbf\001\002\000\004\026\u010a\001\002\000\004\067\u010b" +
    "\001\002\000\004\072\u010c\001\002\000\004\070\u010d\001" +
    "\002\000\014\003\ufff6\027\ufff6\030\ufff6\031\ufff6\074\ufff6" +
    "\001\002\000\006\003\u0111\027\u010f\001\002\000\004\067" +
    "\u0115\001\002\000\006\002\uff8d\065\uff8d\001\002\000\006" +
    "\065\061\071\052\001\002\000\006\002\uff8a\065\uff8a\001" +
    "\002\000\004\065\167\001\002\000\006\002\uff8b\065\uff8b" +
    "\001\002\000\004\057\u0116\001\002\000\004\071\052\001" +
    "\002\000\006\002\uff8c\065\uff8c\001\002\000\006\003\u011a" +
    "\027\u0119\001\002\000\004\067\u011f\001\002\000\006\065" +
    "\061\071\052\001\002\000\006\002\uffba\065\uffba\001\002" +
    "\000\006\002\uffb8\065\uffb8\001\002\000\004\065\167\001" +
    "\002\000\006\002\uffb7\065\uffb7\001\002\000\004\060\u0120" +
    "\001\002\000\004\071\052\001\002\000\006\002\uffb9\065" +
    "\uffb9\001\002\000\012\003\u0124\011\u0125\012\u0127\013\u0126" +
    "\001\002\000\006\002\uffe2\065\uffe2\001\002\000\014\003" +
    "\u0124\011\u0125\012\u0127\013\u0126\071\052\001\002\000\004" +
    "\067\u0136\001\002\000\004\067\u0133\001\002\000\004\067" +
    "\u0128\001\002\000\004\060\u0129\001\002\000\010\003\u012b" +
    "\064\u012a\071\052\001\002\000\012\003\u0124\011\u0125\012" +
    "\u0127\013\u0126\001\002\000\016\003\u0124\011\u0125\012\u0127" +
    "\013\u0126\065\061\071\052\001\002\000\006\002\uffe0\065" +
    "\uffe0\001\002\000\006\002\ufff0\065\ufff0\001\002\000\006" +
    "\002\uffee\065\uffee\001\002\000\004\065\167\001\002\000" +
    "\006\002\uffef\065\uffef\001\002\000\006\002\uffed\065\uffed" +
    "\001\002\000\006\002\ufff1\065\ufff1\001\002\000\004\060" +
    "\u0134\001\002\000\010\003\u012b\064\u012a\071\052\001\002" +
    "\000\006\002\uffdf\065\uffdf\001\002\000\004\060\u0137\001" +
    "\002\000\010\003\u012b\064\u012a\071\052\001\002\000\006" +
    "\002\uffe1\065\uffe1\001\002\000\006\002\uffde\065\uffde\001" +
    "\002\000\006\002\uffdd\065\uffdd\001\002\000\006\002\ufffa" +
    "\065\ufffa\001\002\000\032\003\151\027\143\036\137\037" +
    "\144\040\140\041\146\052\145\053\154\054\152\055\153" +
    "\056\141\075\147\001\002\000\006\002\uff89\065\uff89\001" +
    "\002\000\014\003\u0141\027\u013f\030\u0143\031\u0142\074\u0144" +
    "\001\002\000\004\067\u0157\001\002\000\006\002\uffb6\065" +
    "\uffb6\001\002\000\010\003\306\064\305\071\052\001\002" +
    "\000\004\067\u0153\001\002\000\004\067\u0150\001\002\000" +
    "\004\067\u0145\001\002\000\004\057\u0146\001\002\000\010" +
    "\003\u0148\064\u0147\071\052\001\002\000\014\003\u0141\027" +
    "\u013f\030\u0143\031\u0142\074\u0144\001\002\000\020\003\u0141" +
    "\027\u013f\030\u0143\031\u0142\065\061\071\052\074\u0144\001" +
    "\002\000\006\002\uffb4\065\uffb4\001\002\000\006\002\uffc4" +
    "\065\uffc4\001\002\000\006\002\uffc1\065\uffc1\001\002\000" +
    "\004\065\167\001\002\000\006\002\uffc3\065\uffc3\001\002" +
    "\000\006\002\uffc2\065\uffc2\001\002\000\006\002\uffc5\065" +
    "\uffc5\001\002\000\004\057\u0151\001\002\000\010\003\u0148" +
    "\064\u0147\071\052\001\002\000\006\002\uffb2\065\uffb2\001" +
    "\002\000\004\060\u0154\001\002\000\010\003\u0148\064\u0147" +
    "\071\052\001\002\000\006\002\uffb3\065\uffb3\001\002\000" +
    "\006\002\uffb1\065\uffb1\001\002\000\004\060\u0158\001\002" +
    "\000\010\003\u0148\064\u0147\071\052\001\002\000\006\002" +
    "\uffb5\065\uffb5\001\002\000\004\065\167\001\002\000\004" +
    "\002\ufffd\001\002\000\004\066\u015d\001\002\000\004\065" +
    "\000\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\012\002\005\004\006\005\007\006\010\001" +
    "\001\000\004\003\u015d\001\001\000\002\001\001\000\006" +
    "\004\006\006\u0159\001\001\000\036\012\014\016\037\020" +
    "\036\022\017\024\015\026\024\031\016\033\025\034\035" +
    "\036\031\042\022\044\030\046\040\050\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u013d\001\001\000\004\011\u013b\001\001\000\006\004" +
    "\006\006\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0121\001\001\000\004\010" +
    "\u0117\001\001\000\002\001\001\000\004\011\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\354\001" +
    "\001\000\004\051\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\273\001\001\000\002\001\001\000" +
    "\004\011\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\043\001" +
    "\001\000\002\001\001\000\004\023\046\001\001\000\010" +
    "\004\006\006\062\007\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\133\037\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\133\037\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\133\037\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\232\001\001\000\012\004\006\006\141\007" +
    "\147\047\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\161\040\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\161\040\160\001\001" +
    "\000\004\047\171\001\001\000\012\004\006\006\163\007" +
    "\164\047\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\161\040\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\161\040\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\161" +
    "\040\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\161\040\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\161\040\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\161\040\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\161\040" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\161\040\223\001\001\000\002\001" +
    "\001\000\004\041\225\001\001\000\006\007\161\040\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\161\040\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\133\037" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\133\037\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\133\037\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\133\037" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\133\037\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\133\037\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\133\037\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\133\037\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\133\037\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\133\037\272\001\001\000\002\001\001\000" +
    "\004\021\276\001\001\000\002\001\001\000\006\007\306" +
    "\014\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\306\014\307\001\001\000\004\021\314\001\001\000" +
    "\012\004\006\006\311\007\312\021\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\306\014\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\306" +
    "\014\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\306\014\326\001\001\000\002" +
    "\001\001\000\004\025\332\001\001\000\006\007\340\015" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\340\015\341\001" +
    "\001\000\004\025\346\001\001\000\012\004\006\006\342" +
    "\007\344\025\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\340\015\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\370\027\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\370\027\367" +
    "\001\001\000\004\032\375\001\001\000\012\004\006\006" +
    "\371\007\373\032\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\370\027\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\370" +
    "\027\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\370\027\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\006\006\u0112\007" +
    "\u0111\001\001\000\002\001\001\000\004\003\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0116\001" +
    "\001\000\002\001\001\000\004\052\u011a\001\001\000\002" +
    "\001\001\000\010\004\006\006\u011c\007\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0120\001" +
    "\001\000\002\001\001\000\004\017\u0122\001\001\000\002" +
    "\001\001\000\006\007\u0139\017\u0138\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u012c\013\u012b\001\001\000\004\017\u0131\001" +
    "\001\000\012\004\006\006\u012e\007\u012f\017\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\u012c\013" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\u012c\013\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u013c" +
    "\001\001\000\002\001\001\000\004\035\u013f\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\306\014\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u0149\030\u0148\001\001" +
    "\000\004\035\u014e\001\001\000\012\004\006\006\u014b\007" +
    "\u014c\035\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u0149\030\u0151\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\u0149\030\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u0149\030\u0158\001\001\000\002\001\001\000\004\003\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IndigoSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IndigoSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IndigoSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	UserCommands userCommands = new UserCommands();
	FormCommands formCommands = new FormCommands();
	ComponentCommands componentCommands = new ComponentCommands();

	
	/* Getters*/
		public UserCommands getUserCommands(){
			return this.userCommands;
		}
		public FormCommands getFormCommands(){
			return this.formCommands;
		}
		public ComponentCommands getComponentCommands(){
			return this.componentCommands;
		}
	/* End Getters*/


	/* Commands For User */	
		 void startLogin(){
                        Symbol sym =  cur_token;
                        int row = sym.left;
                        int col = sym.right;
			userCommands.startLogin(String.valueOf(cur_token),row,col);
		}
			 void loginUser(String user){
				userCommands.loginUser(user);
			}
			 void loginPassword (String password){
				userCommands.loginPassword(password);
			}
		 void closeLogin(){
			userCommands.closeLogin();
		}
		

		 void startUser(){
			//Close any user before is open
			userCommands.close();
			//Open new user
                        Symbol sym = cur_token;
                        int row = sym.left;
                        int column = sym.right;
			userCommands.open(String.valueOf(sym.value), row,column);
		}
			 void addUserName(String name){
				userCommands.addUser(name);
			}
			 void addUserPassword(String password){
				userCommands.addPassword(password);

			}
			 void addUserDate(String date){
				try{
                                    Date actualDate = new SimpleDateFormat("yyyy-MM-dd").parse(date);
                                    userCommands.addDate(actualDate);
				}catch(Exception ex){
					System.out.println("Error: "+ex.getMessage());
				}
			}
		 void closeUser(){
			userCommands.close();
		}
		 void deleteUser(String ID){
			userCommands.delete(ID);
		}
		 void startModifyUser(){
                        Symbol sym = cur_token;
                        int row = sym.left;
                        int column = sym.right;
			userCommands.openModify(String.valueOf(sym.value),row,column);
		}
			 void addPastUser(String name){
				userCommands.addPastUser(name);
			}
			 void addNewUser(String name){
				userCommands.addNewUser(name);
			}
		 void closeModifyUser(){
			userCommands.closeModify();
		}
			
	/* End Commands for User */

	/* Commands for Form */
		 void deleteForm(String ID){
			formCommands.delete(ID);
		}
		 void startModifyForm(){
			formCommands.openModify();
		}
		 void closeModifyForm(){
			formCommands.closeModify();	
		}
		 void startForm(){
			formCommands.close();
			formCommands.start();	
		}

		 void closeForm(){
			formCommands.close();
		}

			 void addIdForm(String ID){
				formCommands.addId(ID);
			}
			 void addTittleForm(String tittle){
				formCommands.addTittle(tittle);
			}
			 void addNameForm(String name){
				formCommands.addName(name);
			}
			 void addTopicForm(String topic){
				formCommands.addTopic(topic);
			}
	/* End Commands for Form */

	/* COMMANDS FOR COMPONENTS */
		 void deleteComponent(String ID){
			componentCommands.delete(ID);
		}
		 void startModifyComponent(){
			componentCommands.openModify();
		}
		 void closeModifyComponent(){
			componentCommands.closeModify();
		}
		 void startComponent(){
			componentCommands.start();
		}
		 void closeComponent(){
			componentCommands.close();
		}
			 void addIdComponent(String ID){
				componentCommands.addId( ID);
			}
			 void addnCampName(String camp){
				componentCommands.addCampName( camp);
			}
			 void addFormName(String name){
				componentCommands.addFormName(name);
			}
			 void addClassName(String CLASS){
				componentCommands.addClassName(CLASS);
			}
			 
			 void addVisible_Text(String visible){
				componentCommands.addVisibleText(visible);
			}
			 void addAlign(String align){
				componentCommands.addAlign(align);			
			}
			 void addRequired(String required){
				componentCommands.addRequired(required);
			}
			 void addOptions(String options){
				componentCommands.addOptions(options);
			}
			 void addRows(String rows){
				componentCommands.addRows(rows);
			}
			 void addCols(String cols){
				componentCommands.addCols(cols);
			}
			 void addImage(String url){
				componentCommands.addUrl(url);
			}
	/* END COMPONENTS*/

	@Override
	public void syntax_error(Symbol symbol){
		/*
		//This code works better with report_error(String message, Object info) method
		if (info instanceof String){
			errors++; 
			System.err.println("  "+ errors + "==> " + info + " "+ message + 
							"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
		}
		else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol) 
			m.append( "("+info.toString()+")" );     
			m.append(" : "+message);   
			System.err.println(m);
		}*/
    	report_expected_token_ids();
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            String errorArmado="";
            TokenHandler tokenHandler = new TokenHandler();
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                errorArmado += tokenHandler.expectedFormIndigo(symbl_name_from_id(expected_token_ids().get(index)));
            }
            String error = "Se esperaba la forma: " + errorArmado;
            System.out.println("Error en token:"+token+"\n"+error+" \n Linea: "+line+", Columna: "+column);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$IndigoSyntax$actions {
  private final IndigoSyntax parser;

  /** Constructor */
  CUP$IndigoSyntax$actions(IndigoSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$IndigoSyntax$do_action_part00000000(
    int                        CUP$IndigoSyntax$act_num,
    java_cup.runtime.lr_parser CUP$IndigoSyntax$parser,
    java.util.Stack            CUP$IndigoSyntax$stack,
    int                        CUP$IndigoSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IndigoSyntax$result;

      /* select the action based on the action number */
      switch (CUP$IndigoSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ip EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		RESULT = start_val;
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$IndigoSyntax$parser.done_parsing();
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sp ::= LESS START GREATER 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("sp",0, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fp ::= LESS FINAL GREATER 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("fp",1, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // so ::= LESS APERTURE COLON 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("so",2, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ip ::= sp io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("ip",3, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ip ::= io 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("ip",3, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ip ::= error fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("ip",3, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // io ::= so partiture io 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("io",4, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // io ::= 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("io",4, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initu ::= GREATER OPEN_CURLY CREDENTIAL COLON OPEN_BRACKET OPEN_CURLY 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("initu",39, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // close ::= CLOSE_CURLY CLOSE_BRACKET CLOSE_CURLY LESS END GREATER 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("close",5, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // initf ::= GREATER OPEN_CURLY FORM_PARAMETERS COLON OPEN_BRACKET OPEN_CURLY 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("initf",6, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // initc ::= GREATER OPEN_CURLY C_PARAMETERS COLON OPEN_BRACKET OPEN_CURLY 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("initc",7, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // partiture ::= keywordu 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("partiture",8, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // partiture ::= keywordf 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("partiture",8, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // partiture ::= keywordc 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("partiture",8, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gcreate_partiture ::= COMA gcreate_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_partiture",9, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gcreate_partiture ::= close 
            {
              Object RESULT =null;
		 closeUser(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_partiture",9, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gcreate_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_partiture",9, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gcreate_partiture ::= error gcreate_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_partiture",9, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gcreate_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_partiture",9, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gmodify_partiture ::= COMA gmodify_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_partiture",10, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gmodify_partiture ::= close 
            {
              Object RESULT =null;
		 closeModifyUser(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_partiture",10, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gmodify_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_partiture",10, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gmodify_partiture ::= error gmodify_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_partiture",10, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gmodify_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_partiture",10, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // glogin_partiture ::= COMA glogin_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_partiture",11, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // glogin_partiture ::= close 
            {
              Object RESULT =null;
		 closeLogin(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_partiture",11, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // glogin_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_partiture",11, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // glogin_partiture ::= error glogin_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_partiture",11, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // glogin_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_partiture",11, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gcreate ::= CREATE_U initu gcreate_user 
            {
              Object RESULT =null;
		 startUser();
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate",12, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gcreate_user ::= USER COLON TEXTWIS gcreate_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addUserName(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_user",13, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gcreate_user ::= PASSWORD COLON TEXTWIS gcreate_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addUserPassword(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_user",13, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gcreate_user ::= DATE COLON TEXTWIS gcreate_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addUserDate(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_user",13, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gcreate_user ::= error gcreate_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_user",13, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gcreate_user ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreate_user",13, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gmodify ::= MODIFY_U initu gmodify_user 
            {
              Object RESULT =null;
		 startModifyUser();
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify",14, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gmodify_user ::= PAST_USER COLON TEXTWIS gmodify_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addPastUser(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_user",15, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // gmodify_user ::= NEW_USER COLON TEXTWIS gmodify_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addNewUser(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_user",15, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gmodify_user ::= NEW_PASSWORD COLON TEXTWIS gmodify_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addUserPassword(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_user",15, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gmodify_user ::= DATE COLON TEXTWIS gmodify_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addUserDate(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_user",15, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gmodify_user ::= error gmodify_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodify_user",15, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gdelete ::= DELETE_U initu gdelete_user 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdelete",16, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gdelete_user ::= USER COLON TEXTWIS close 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		deleteUser(String.valueOf(text).replace("\"",""));
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdelete_user",17, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gdelete_user ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdelete_user",17, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gdelete_user ::= error io 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdelete_user",17, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // glogin ::= LOGIN_U initu glogin_user 
            {
              Object RESULT =null;
		startLogin();
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin",18, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // glogin_user ::= USER COLON TEXTWIS glogin_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 loginUser(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_user",19, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // glogin_user ::= PASSWORD COLON TEXTWIS glogin_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 loginPassword(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_user",19, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // glogin_user ::= error glogin_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("glogin_user",19, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // keywordu ::= gcreate 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordu",20, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // keywordu ::= gmodify 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordu",20, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // keywordu ::= gdelete 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordu",20, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // keywordu ::= glogin 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordu",20, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gcreatef_partiture ::= COMA gcreatef_form 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_partiture",21, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gcreatef_partiture ::= close 
            {
              Object RESULT =null;
		 closeForm(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_partiture",21, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gcreatef_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_partiture",21, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gcreatef_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_partiture",21, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gcreatef_partiture ::= error gcreatef_form 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_partiture",21, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gmodifyf_partiture ::= COMA gmodifyf_form 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_partiture",22, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gmodifyf_partiture ::= close 
            {
              Object RESULT =null;
		 closeModifyForm(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_partiture",22, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gmodifyf_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_partiture",22, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gmodifyf_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_partiture",22, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gmodifyf_partiture ::= error gmodifyf_form 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_partiture",22, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gcreatef ::= NEW_F initf gcreatef_form 
            {
              Object RESULT =null;
		 startForm(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef",23, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gcreatef_form ::= ID COLON TEXTWIS gcreatef_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addIdForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_form",24, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gcreatef_form ::= TITTLE COLON TEXTWS gcreatef_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addTittleForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_form",24, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gcreatef_form ::= NAME_F COLON TEXTWIS gcreatef_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addNameForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_form",24, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gcreatef_form ::= TOPIC COLON TEXTWS gcreatef_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addTopicForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_form",24, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gcreatef_form ::= error gcreatef_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gcreatef_form",24, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gdeletef ::= DELETE_F initf gdeletef_form 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdeletef",25, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gdeletef_form ::= ID COLON TEXTWIS close 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 deleteForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdeletef_form",40, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gdeletef_form ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdeletef_form",40, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gdeletef_form ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gdeletef_form",40, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gmodifyf ::= MODIFY_F initf gmodifyf_form 
            {
              Object RESULT =null;
		 startModifyForm(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf",26, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gmodifyf_form ::= ID COLON TEXTWIS gmodifyf_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addIdForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_form",27, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gmodifyf_form ::= TITTLE COLON TEXTWS gmodifyf_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addTittleForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_form",27, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gmodifyf_form ::= NAME_F COLON TEXTWIS gmodifyf_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addNameForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_form",27, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gmodifyf_form ::= TOPIC COLON TEXTWS gmodifyf_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addTopicForm(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_form",27, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gmodifyf_form ::= error gmodify_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("gmodifyf_form",27, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // keywordf ::= gcreatef 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordf",28, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // keywordf ::= gdeletef 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordf",28, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // keywordf ::= gmodifyf 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordf",28, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // modifyc_partiture ::= COMA modifyc_component 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_partiture",30, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // modifyc_partiture ::= close 
            {
              Object RESULT =null;
		 closeModifyComponent(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_partiture",30, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // modifyc_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_partiture",30, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // modifyc_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_partiture",30, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // modifyc_partiture ::= error modifyc_component 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_partiture",30, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // createc_partiture ::= COMA modifyc_component 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_partiture",29, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // createc_partiture ::= close 
            {
              Object RESULT =null;
		 closeComponent(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_partiture",29, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // createc_partiture ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_partiture",29, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // createc_partiture ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_partiture",29, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // createc_partiture ::= error modifyc_component 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_partiture",29, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // classnames ::= TEXT_CAMP 
            {
              Object RESULT =null;
		 RESULT = "TEXT_CAMP"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // classnames ::= TEXT_AREA 
            {
              Object RESULT =null;
		 RESULT = "TEXT_AREA"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // classnames ::= CHECKBOX 
            {
              Object RESULT =null;
		 RESULT = "CHECKBOX"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // classnames ::= RATIO 
            {
              Object RESULT =null;
		 RESULT = "RATIO"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // classnames ::= FILE 
            {
              Object RESULT =null;
		 RESULT = "FILE"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // classnames ::= IMAGE 
            {
              Object RESULT =null;
		 RESULT = "IMAGE"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // classnames ::= COMBO 
            {
              Object RESULT =null;
		 RESULT = "COMBO"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // classnames ::= BUTTON 
            {
              Object RESULT =null;
		 RESULT = "BUTTON"; 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // classnames ::= error createc_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("classnames",31, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // createc ::= ADD_C initc createc_component 
            {
              Object RESULT =null;
		 startComponent(); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc",32, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // createc_component ::= ID COLON TEXTWIS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addIdComponent(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // createc_component ::= NAME_C COLON TEXTWS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addnCampName(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // createc_component ::= FORM COLON TEXTWIS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addFormName(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // createc_component ::= CLASS COLON classnames createc_partiture 
            {
              Object RESULT =null;
		int CLASSleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int CLASSright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object CLASS = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addClassName(String.valueOf(CLASS).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // createc_component ::= OPTIONS COLON TEXTWS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addOptions(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // createc_component ::= TEXTV COLON TEXTWS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addVisible_Text(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // createc_component ::= ALIGNMENT COLON POSALIGNMENT createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addAlign(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // createc_component ::= REQUIRED COLON BOOL createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addRequired(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // createc_component ::= ROWS COLON TEXTWIS createc_partiture 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addRows(String.valueOf(number).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // createc_component ::= COLS COLON TEXTWIS createc_partiture 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addCols(String.valueOf(number).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // createc_component ::= URL COLON TEXTWS createc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addImage(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // createc_component ::= error createc_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("createc_component",33, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // deletec ::= DELETE_C initc deletec_component 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("deletec",34, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // deletec_component ::= ID COLON TEXTWS close 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 deleteComponent(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("deletec_component",35, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // deletec_component ::= error io fp 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("deletec_component",35, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // deletec_component ::= error close 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("deletec_component",35, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // modifyc ::= MODIFY_C initc modifyc_component 
            {
              Object RESULT =null;
		 startModifyComponent();
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc",36, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // modifyc_component ::= ID COLON TEXTWIS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addIdComponent(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // modifyc_component ::= NAME_C COLON TEXTWS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addnCampName(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // modifyc_component ::= FORM COLON TEXTWIS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addFormName(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // modifyc_component ::= CLASS COLON classnames modifyc_partiture 
            {
              Object RESULT =null;
		int CLASSleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int CLASSright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object CLASS = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addClassName(String.valueOf(CLASS).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // modifyc_component ::= OPTIONS COLON TEXTWS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addOptions(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // modifyc_component ::= TEXTV COLON TEXTWS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addVisible_Text(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // modifyc_component ::= ALIGNMENT COLON POSALIGNMENT modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addAlign(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // modifyc_component ::= REQUIRED COLON BOOL modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addRequired(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // modifyc_component ::= ROWS COLON TEXTWIS modifyc_partiture 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addRows(String.valueOf(number).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // modifyc_component ::= COLS COLON TEXTWIS modifyc_partiture 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addCols(String.valueOf(number).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // modifyc_component ::= URL COLON TEXTWS modifyc_partiture 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)).value;
		 addImage(String.valueOf(text).replace("\"","")); 
              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // modifyc_component ::= error modifyc_partiture 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("modifyc_component",37, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.elementAt(CUP$IndigoSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // keywordc ::= createc 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordc",38, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // keywordc ::= deletec 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordc",38, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // keywordc ::= modifyc 
            {
              Object RESULT =null;

              CUP$IndigoSyntax$result = parser.getSymbolFactory().newSymbol("keywordc",38, ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$IndigoSyntax$stack.peek()), RESULT);
            }
          return CUP$IndigoSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$IndigoSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$IndigoSyntax$do_action(
    int                        CUP$IndigoSyntax$act_num,
    java_cup.runtime.lr_parser CUP$IndigoSyntax$parser,
    java.util.Stack            CUP$IndigoSyntax$stack,
    int                        CUP$IndigoSyntax$top)
    throws java.lang.Exception
    {
              return CUP$IndigoSyntax$do_action_part00000000(
                               CUP$IndigoSyntax$act_num,
                               CUP$IndigoSyntax$parser,
                               CUP$IndigoSyntax$stack,
                               CUP$IndigoSyntax$top);
    }
}

}
