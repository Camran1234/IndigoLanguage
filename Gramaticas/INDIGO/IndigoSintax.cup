package com.mycompany.indigo;

import com.mycompany.handlers.ComponentCommands;
import com.mycompany.handlers.FormCommands;
import com.mycompany.handlers.UserCommands;
import com.mycompany.handlers.ErrorCommands;
import com.mycompany.formats.ErrorIndigo;
import java.text.SimpleDateFormat;
import com.mycompany.indigo.*;
import java.util.Date;
import java_cup.runtime.Symbol;

parser code {:
	UserCommands userCommands = new UserCommands();
	FormCommands formCommands = new FormCommands();
	ComponentCommands componentCommands = new ComponentCommands();
	ErrorCommands errorCommands = new ErrorCommands(false);
	
	/* Getters*/
		public UserCommands getUserCommands(){
			return this.userCommands;
		}
		public FormCommands getFormCommands(){
			return this.formCommands;
		}
		public ComponentCommands getComponentCommands(){
			return this.componentCommands;
		}
		public ErrorCommands getErrorCommands(){
			return this.errorCommands;
		}
	/* End Getters*/


	/* Commands For User */	
		 void startLogin(){
			Symbol sym =  cur_token;
            int row = sym.left;
            int col = sym.right;
			userCommands.startLogin(String.valueOf(cur_token),row,col);
		}
			 void loginUser(String user){
				userCommands.loginUser(user);
			}
			 void loginPassword (String password){
				userCommands.loginPassword(password);
			}
		 void closeLogin(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			userCommands.closeLogin(String.valueOf(sym.value),row,column);
		}
		

		 void startUser(){
			//Close any user before is open
			//Open new user
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			userCommands.open(String.valueOf(sym.value), row,column);
			System.out.println("User Created");
		}
			 void addUserName(String name){
				userCommands.addUser(name);
			}
			 void addUserPassword(String password){
				userCommands.addPassword(password);

			}
			 void addUserDate(String date){
				try{
					Date actualDate = new SimpleDateFormat("yyyy-MM-dd").parse(date);
					userCommands.addDate(actualDate);
				}catch(Exception ex){
					System.out.println("Error: "+ex.getMessage());
				}
			}
		 void closeUser(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			userCommands.close(String.valueOf(sym.value),row,column);
		}
		 void deleteUser(String ID){
			userCommands.delete(ID);
		}
		 void startModifyUser(){
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			userCommands.openModify(String.valueOf(sym.value),row,column);
		}
			 void addPastUser(String name){
				userCommands.addPastUser(name);
			}
			 void addNewUser(String name){
				userCommands.addNewUser(name);
			}
			 void addNewPassword(String password){
				 userCommands.addPassword(password);
			 }
		 void closeModifyUser(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			userCommands.closeModify(String.valueOf(sym.value),row,column);
		}
			
	/* End Commands for User */

	/* Commands for Form */
		 void deleteForm(String ID){
			formCommands.delete(ID);
		}
		 void startModifyForm(){
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
            formCommands.openModify(String.valueOf(sym.value),row,column);
		}
		 void closeModifyForm(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			formCommands.closeModify(String.valueOf(sym.value),row,column);	
		}
		 void startForm(){
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			formCommands.start(String.valueOf(sym.value),row,column);	
		}

		 void closeForm(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			formCommands.close(String.valueOf(sym.value),row,column);	
		}

			 void addIdForm(String ID){
				formCommands.addId(ID);
			}
			 void addTittleForm(String tittle){
				formCommands.addTittle(tittle);
			}
			 void addNameForm(String name){
				formCommands.addName(name);
			}
			 void addTopicForm(String topic){
				formCommands.addTopic(topic);
			}
			void addUserCreatorForm(String userCreator){
				formCommands.addUser(userCreator);
			}
			void addDateCreatorForm(String date){
				formCommands.addDate(date);
			}
	/* End Commands for Form */

	/* COMMANDS FOR COMPONENTS */
		 void deleteComponent(String ID, String Form){
			componentCommands.delete(ID, Form);
		}
		 void startModifyComponent(){
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
            componentCommands.openModify(String.valueOf(sym),row,column);
		}
		 void closeModifyComponent(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			componentCommands.closeModify(String.valueOf(sym),row,column);
		}
		 void startComponent(){
			Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
            componentCommands.start(String.valueOf(sym),row,column);
		}
		 void closeComponent(){
			 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;
			componentCommands.close(String.valueOf(sym),row,column);
		}
			 void addIdComponent(String ID){
				componentCommands.addId( ID);
			}
			 void addnCampName(String camp){
				componentCommands.addCampName( camp);
			}
			 void addFormName(String name){
				componentCommands.addFormName(name);
			}
			 void addClassName(String CLASS){
				componentCommands.addClassName(CLASS);
			}
			 
			 void addVisible_Text(String visible){
				componentCommands.addVisibleText(visible);
			}
			 void addAlign(String align){
				componentCommands.addAlign(align);			
			}
			 void addRequired(String required){
				componentCommands.addRequired(required);
			}
			 void addOptions(String options){
				componentCommands.addOptions(options);
			}
			 void addRows(String rows){
				componentCommands.addRows(rows);
			}
			 void addCols(String cols){
				componentCommands.addCols(cols);
			}
			 void addImage(String url){
				componentCommands.addUrl(url);
			}
	/* END COMPONENTS*/

	@Override
	public void syntax_error(Symbol symbol){
		/*
		//This code works better with report_error(String message, Object info) method
		if (info instanceof String){
			errors++; 
			System.err.println("  "+ errors + "==> " + info + " "+ message + 
							"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
		}
		else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol) 
			m.append( "("+info.toString()+")" );     
			m.append(" : "+message);   
			System.err.println(m);
		}*/
    	report_expected_token_ids();
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            String errorArmado="";
            TokenHandler tokenHandler = new TokenHandler();
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                errorArmado += tokenHandler.expectedFormIndigo(symbl_name_from_id(expected_token_ids().get(index)));
				errorArmado += ", ";
            }
			
            String error = "Se esperaba la forma: " + errorArmado;
			errorCommands.addError(new ErrorIndigo(error,token, line, column));
            System.out.println("Error en token:"+token+"\n"+error+" \n Linea: "+line+", Columna: "+column);
	}
	@Override
	public void unrecovered_syntax_error(Symbol symbol){
		syntax_error(symbol);
	}
	
:}

terminal START, FINAL, APERTURE, END, CREDENTIAL, USER, PASSWORD, DATE, PAST_USER, NEW_USER, NEW_PASSWORD, 
CREATE_U, MODIFY_U, DELETE_U, LOGIN_U, NEW_F, DELETE_F, MODIFY_F, FORM_PARAMETERS, ID, TOPIC, NAME_F, 
ADD_C, DELETE_C, MODIFY_C, C_PARAMETERS, NAME_C, FORM, CLASS, TEXTV, TEXT_CAMP, TEXT_AREA, 
CHECKBOX, RATIO, FILE, IMAGE, COMBO, BUTTON, REQUIRED, OPTIONS, ROWS, COLS, URL,  TEXTWS, TEXTWIS, BOOL, POSALIGNMENT, COMA, LESS, GREATER, COLON,
OPEN_CURLY, CLOSE_CURLY, OPEN_BRACKET, CLOSE_BRACKET, TITTLE, ALIGNMENT, INDEX, DUNO, TEXTID; 

non terminal sp, fp, so, ip, io,close, initf, initc, partiture, gcreate_partiture,
gmodify_partiture, glogin_partiture, gcreate, gcreate_user, gmodify, gmodify_user, gdelete, gdelete_user, glogin,
glogin_user, keywordu, gcreatef_partiture, gmodifyf_partiture, gcreatef, gcreatef_form, gdeletef,
gmodifyf, gmodifyf_form, keywordf, createc_partiture, modifyc_partiture, classnames, createc,
createc_component, deletec, deletec_component, modifyc, modifyc_component, keywordc, initu, gdeletef_form, iop;

precedence left LESS;

start with ip;
/* LEVEL 1 */
	sp ::=	LESS START GREATER;
	fp ::=	LESS FINAL GREATER;

	so ::=	LESS APERTURE COLON;

	ip ::=	sp iop {:System.out.println("0");:}
			|io {:System.out.println("1");:}
			|error iop
			|error io;
 	iop::= 	io iop {:System.out.println("IOP CALLED");:}
	 		|fp {:System.out.println("Empty IO");:};

	io ::=	so partiture  {:System.out.println("2");:}
			|error partiture; 

	
/* LEVEL 2 */
	initu ::= GREATER OPEN_CURLY CREDENTIAL COLON OPEN_BRACKET OPEN_CURLY;
	close ::= CLOSE_CURLY CLOSE_BRACKET CLOSE_CURLY LESS END GREATER{:System.out.println("CLOSE");:};

	initf ::= GREATER OPEN_CURLY FORM_PARAMETERS COLON OPEN_BRACKET OPEN_CURLY;
	initc ::= GREATER OPEN_CURLY C_PARAMETERS COLON OPEN_BRACKET OPEN_CURLY;

	partiture ::= keywordu {:System.out.println("3");:}
			|keywordf {:System.out.println("4");:}
			|keywordc {:System.out.println("5");:};

/*LEVEL 3 */
	/* USERS */
		gcreate_partiture ::= 	COMA gcreate_user
					| close {:  System.out.println("Starting User");startUser(); :}
					|error close
					|error gcreate_user;
		gmodify_partiture ::=	COMA gmodify_user
					| close {: startModifyUser();System.out.println("Starting Modify User"); :}
					|error close
					|error gmodify_user
					;
		glogin_partiture ::=	COMA glogin_user
					| close {:  startLogin();:}
					|error close
					|error glogin_user
					;


		gcreate ::=	CREATE_U initu gcreate_user {:System.out.println("Closing USER");closeUser();
												:};
		gcreate_user ::= USER COLON TEXTWIS:text gcreate_partiture {:System.out.println("12"); addUserName(String.valueOf(text).replace("\"","")); 
																	:}
				|PASSWORD COLON TEXTWIS:text gcreate_partiture {: System.out.println("13");addUserPassword(String.valueOf(text).replace("\"","")); 
																	:}
				|PASSWORD COLON TEXTWS:text gcreate_partiture {: System.out.println("13");addUserPassword(String.valueOf(text).replace("\"","")); 
																	:}
				|DATE COLON TEXTWIS:text gcreate_partiture {: System.out.println("14");addUserDate(String.valueOf(text).replace("\"","")); 
																	:}
				 | error gcreate_partiture;

		gmodify ::=	MODIFY_U initu gmodify_user {: closeModifyUser();:};
		gmodify_user ::= PAST_USER COLON TEXTWIS:text gmodify_partiture {: addPastUser(String.valueOf(text).replace("\"","")); :}
				|NEW_USER COLON TEXTWIS:text gmodify_partiture {: addNewUser(String.valueOf(text).replace("\"","")); :}
				|NEW_PASSWORD COLON TEXTWIS:text gmodify_partiture {: addUserPassword(String.valueOf(text).replace("\"","")); :}
				|NEW_PASSWORD COLON TEXTWS:text gmodify_partiture {: addUserPassword(String.valueOf(text).replace("\"","")); :}
				|DATE COLON TEXTWIS:text gmodify_partiture {: addUserDate(String.valueOf(text).replace("\"","")); :}
				| error gmodify_partiture;

		gdelete ::=	DELETE_U initu gdelete_user;
		gdelete_user ::= USER COLON TEXTWIS:text close {:deleteUser(String.valueOf(text).replace("\"",""));:}
						|error close;

		glogin ::=	LOGIN_U initu glogin_user {:closeLogin();:};
		glogin_user ::=	USER COLON TEXTWIS:text glogin_partiture {: loginUser(String.valueOf(text).replace("\"","")); :}
				|PASSWORD COLON TEXTWIS:text glogin_partiture {: loginPassword(String.valueOf(text).replace("\"","")); :}
				|PASSWORD COLON TEXTWS:text glogin_partiture {: loginPassword(String.valueOf(text).replace("\"","")); :}
				| error glogin_partiture;

		keywordu ::= 	gcreate {:System.out.println("7");:}
				|gmodify {:System.out.println("8");:} 
				|gdelete {:System.out.println("9");:}
				|glogin {:System.out.println("10");:};
	/* END USER */

	/* FORM	*/
		gcreatef_partiture ::=	COMA gcreatef_form
					|close {: startForm();  :}
					|error close
					|error gcreatef_form;
		gmodifyf_partiture ::=	COMA gmodifyf_form
					|close {: startModifyForm(); :}
					|error close
					|error gmodifyf_form;

		gcreatef ::=	NEW_F initf gcreatef_form {: closeForm(); :};
		gcreatef_form::= ID COLON TEXTID:text gcreatef_partiture {: addIdForm(String.valueOf(text).replace("\"","")); :}
				|TITTLE COLON TEXTWS:text gcreatef_partiture {: addTittleForm(String.valueOf(text).replace("\"","")); :}
				|TITTLE COLON TEXTWIS:text gcreatef_partiture {: addTittleForm(String.valueOf(text).replace("\"","")); :}
				|NAME_F COLON TEXTWIS:text gcreatef_partiture {: addNameForm(String.valueOf(text).replace("\"","")); :}
				|TOPIC COLON TEXTWS:text gcreatef_partiture {: addTopicForm(String.valueOf(text).replace("\"","")); :}
				|TOPIC COLON TEXTWIS:text gcreatef_partiture {: addTopicForm(String.valueOf(text).replace("\"","")); :}
				|NEW_USER COLON TEXTWIS:text gcreatef_partiture {: addUserCreatorForm(String.valueOf(text).replace("\"","")); :}
				|DATE COLON TEXTWS:text gcreatef_partiture {: addDateCreatorForm(String.valueOf(text).replace("\"","")); :}
				|DATE COLON TEXTWIS:text gcreatef_partiture {: addDateCreatorForm(String.valueOf(text).replace("\"","")); :}
				|error gcreatef_partiture;
		
		gdeletef ::=	DELETE_F initf gdeletef_form ;
		gdeletef_form::= ID COLON TEXTID:text close {: deleteForm(String.valueOf(text).replace("\"","")); :}
						|error close
						;
	
		gmodifyf ::=	MODIFY_F initf gmodifyf_form {: closeModifyForm(); :};
		gmodifyf_form::= ID COLON TEXTID:text gmodifyf_partiture {: addIdForm(String.valueOf(text).replace("\"","")); :}
				|TITTLE COLON TEXTWS:text gmodifyf_partiture {: addTittleForm(String.valueOf(text).replace("\"","")); :}
				|TITTLE COLON TEXTWIS:text gmodifyf_partiture {: addTittleForm(String.valueOf(text).replace("\"","")); :}
				|NAME_F COLON TEXTWIS:text gmodifyf_partiture {: addNameForm(String.valueOf(text).replace("\"","")); :}
				|TOPIC COLON TEXTWS:text gmodifyf_partiture {: addTopicForm(String.valueOf(text).replace("\"","")); :}
				|TOPIC COLON TEXTWIS:text gmodifyf_partiture {: addTopicForm(String.valueOf(text).replace("\"","")); :}
				|NEW_USER COLON TEXTWIS:text gmodifyf_partiture {: addUserCreatorForm(String.valueOf(text).replace("\"","")); :}
				|DATE COLON TEXTWS:text gmodifyf_partiture {: addDateCreatorForm(String.valueOf(text).replace("\"","")); :}
				|error gmodify_partiture;

		keywordf ::=	gcreatef
				|gdeletef
				|gmodifyf;	

	/* END FORM */

	/* COMPONENT */


		modifyc_partiture ::=	COMA modifyc_component
					|close {: startModifyComponent(); :}
					|error close
					|error modifyc_component;
		createc_partiture ::=	COMA createc_component
					|close {: startComponent(); :}
					|error close
					|error createc_component;

		classnames	::=	TEXT_CAMP  {: RESULT = "CAMPO_TEXTO"; :}
					|TEXT_AREA {: RESULT = "AREA_TEXTO"; :}
					|CHECKBOX {: RESULT = "CHECKBOX"; :}
					|RATIO {: RESULT = "RADIO"; :}
					|FILE {: RESULT = "FICHERO"; :}
					|IMAGE {: RESULT = "IMAGEN"; :}
					|COMBO {: RESULT = "COMBO"; :}
					|BUTTON {: RESULT = "BOTON"; :} 
					|error createc_partiture;

		createc ::=	ADD_C initc createc_component {:  closeComponent();:};

		createc_component ::= 	ID COLON TEXTID:text createc_partiture {: addIdComponent(String.valueOf(text).replace("\"","")); :}
					|NAME_C COLON TEXTWS:text createc_partiture {: addnCampName(String.valueOf(text).replace("\"","")); :}
					|NAME_C COLON TEXTWIS:text createc_partiture {: addnCampName(String.valueOf(text).replace("\"","")); :}
					|FORM COLON TEXTID:text createc_partiture {: addFormName(String.valueOf(text).replace("\"","")); :}
					|CLASS COLON classnames:CLASS createc_partiture {: addClassName(String.valueOf(CLASS).replace("\"","")); :}
					|OPTIONS COLON TEXTWS:text createc_partiture {: addOptions(String.valueOf(text).replace("\"","")); :}
					|OPTIONS COLON TEXTWIS:text createc_partiture {: addOptions(String.valueOf(text).replace("\"","")); :}	
					|TEXTV COLON TEXTWS:text createc_partiture {: addVisible_Text(String.valueOf(text).replace("\"","")); :}
					|TEXTV COLON TEXTWIS:text createc_partiture {: addVisible_Text(String.valueOf(text).replace("\"","")); :}
					|ALIGNMENT COLON POSALIGNMENT:text createc_partiture {: addAlign(String.valueOf(text).replace("\"","")); :}
					|REQUIRED COLON BOOL:text createc_partiture {: addRequired(String.valueOf(text).replace("\"","")); :}
					|ROWS COLON TEXTWIS:number createc_partiture {: addRows(String.valueOf(number).replace("\"","")); :}
					|COLS COLON TEXTWIS:number createc_partiture {: addCols(String.valueOf(number).replace("\"","")); :}
					|URL COLON TEXTWS:text createc_partiture {: addImage(String.valueOf(text).replace("\"","")); :}
					|URL COLON TEXTWIS:text createc_partiture {: addImage(String.valueOf(text).replace("\"","")); :}
					|error createc_partiture;

		deletec ::=	DELETE_C initc deletec_component;
		deletec_component ::=	ID COLON TEXTID:text COMA FORM COLON TEXTID:texto close {: deleteComponent(String.valueOf(text).replace("\"",""), String.valueOf(texto));:}
								|error close;

		modifyc ::=	MODIFY_C initc	modifyc_component {: closeModifyComponent();:};
		modifyc_component ::=ID COLON TEXTID:text modifyc_partiture {: addIdComponent(String.valueOf(text).replace("\"","")); :}
					|NAME_C COLON TEXTWS:text modifyc_partiture {: addnCampName(String.valueOf(text).replace("\"","")); :}
					|NAME_C COLON TEXTWIS:text modifyc_partiture {: addnCampName(String.valueOf(text).replace("\"","")); :}
					|FORM COLON TEXTID:text modifyc_partiture {: addFormName(String.valueOf(text).replace("\"","")); :}
					|CLASS COLON classnames:CLASS modifyc_partiture {: addClassName(String.valueOf(CLASS).replace("\"","")); :}
					|OPTIONS COLON TEXTWS:text modifyc_partiture {: addOptions(String.valueOf(text).replace("\"","")); :}
					|OPTIONS COLON TEXTWIS:text modifyc_partiture {: addOptions(String.valueOf(text).replace("\"","")); :}
					|TEXTV COLON TEXTWS:text modifyc_partiture {: addVisible_Text(String.valueOf(text).replace("\"","")); :}
					|TEXTV COLON TEXTWIS:text modifyc_partiture {: addVisible_Text(String.valueOf(text).replace("\"","")); :}
					|ALIGNMENT COLON POSALIGNMENT:text modifyc_partiture {: addAlign(String.valueOf(text).replace("\"","")); :}
					|REQUIRED COLON BOOL:text modifyc_partiture {: addRequired(String.valueOf(text).replace("\"","")); :}
					|ROWS COLON TEXTWIS:number modifyc_partiture {: addRows(String.valueOf(number).replace("\"","")); :}
					|COLS COLON TEXTWIS:number modifyc_partiture {: addCols(String.valueOf(number).replace("\"","")); :}
					|INDEX COLON TEXTWIS:number modifyc_partiture {: componentCommands.setIndex(String.valueOf(number)); :}
					|URL COLON TEXTWS:text modifyc_partiture {: addImage(String.valueOf(text).replace("\"","")); :}
					|URL COLON TEXTWIS:text modifyc_partiture {: addImage(String.valueOf(text).replace("\"","")); :}
					|error modifyc_partiture;

		keywordc ::= createc
				|deletec
				|modifyc;
	/* END COMPONENT */

