// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: IndigoLexico.flex

package com.mycompany.indigo;
import java_cup.runtime.*;
import static com.mycompany.indigo.symIndigo.*;
import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;
import com.mycompany.handlers.ErrorCommands;
import com.mycompany.formats.ErrorIndigo;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class IndigoLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\11\0\1\6\15\0\1\7\1\0\1\10"+
    "\1\0\1\11\2\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\0\1\44"+
    "\1\0\1\45\3\0\1\46\1\47\1\50\1\51\2\0"+
    "\1\52\2\0\1\53\1\0\1\54\1\55\3\0\1\56"+
    "\1\57\1\60\5\0\1\61\1\62\1\63\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\113\0\1\16\6\0\1\17\61\0\1\20\43\0\1\21"+
    "\11\0\1\22\3\0\1\23\1\0\1\24\6\0\1\25"+
    "\2\0\1\26\11\0\1\27\13\0\1\30\11\0\1\31"+
    "\4\0\1\32\10\0\1\33\17\0\1\34\14\0\1\35"+
    "\10\0\1\36\1\37\14\0\1\40\1\0\1\41\32\0"+
    "\1\42\10\0\1\43\1\44\10\0\1\45\20\0\1\46"+
    "\25\0\1\47\14\0\1\50\10\0\1\51\3\0\1\52"+
    "\5\0\1\53\7\0\1\54\2\0\1\55\1\56\1\57"+
    "\5\0\1\60\4\0\1\61\17\0\1\62\5\0\1\63"+
    "\3\0\1\64\2\0\1\65\6\0\1\66\2\0\1\67"+
    "\10\0\1\70\1\71\4\0\1\72\1\73\1\74\2\0"+
    "\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\u0104\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\u0138\0\150\0\150"+
    "\0\u016c\0\150\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\150\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\150\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\150\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288"+
    "\0\u22bc\0\u22f0\0\150\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\u245c\0\u2490\0\u24c4\0\150\0\u24f8\0\u252c\0\u2560"+
    "\0\150\0\u2594\0\150\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\150\0\u2700\0\u2734\0\150\0\u2768\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\150\0\u293c"+
    "\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\u2b44\0\150\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\150\0\u2d4c\0\u2d80\0\u2db4"+
    "\0\u2de8\0\150\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20"+
    "\0\u2f54\0\u2f88\0\150\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c"+
    "\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c"+
    "\0\u3260\0\u3294\0\150\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398"+
    "\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\150"+
    "\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4"+
    "\0\150\0\150\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc"+
    "\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914\0\150\0\u3948"+
    "\0\150\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4"+
    "\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20\0\u3c54"+
    "\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4"+
    "\0\u3e28\0\u3e5c\0\u3e90\0\150\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60"+
    "\0\u3f94\0\u3fc8\0\u3ffc\0\u4030\0\150\0\150\0\u4064\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\150\0\u4204"+
    "\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4"+
    "\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u4510\0\150"+
    "\0\u4544\0\u4578\0\u45ac\0\u45e0\0\u4614\0\u4648\0\u467c\0\u46b0"+
    "\0\u46e4\0\u4718\0\u474c\0\u4780\0\u47b4\0\u47e8\0\u481c\0\u4850"+
    "\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u4988\0\u49bc\0\u49f0"+
    "\0\u4a24\0\u4a58\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90"+
    "\0\u4bc4\0\u4bf8\0\150\0\u4c2c\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc"+
    "\0\u4d30\0\u4d64\0\u4d98\0\150\0\u4dcc\0\u4e00\0\u4e34\0\150"+
    "\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\150\0\u4f6c\0\u4fa0"+
    "\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4\0\150\0\u50d8\0\u510c"+
    "\0\150\0\150\0\150\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210"+
    "\0\150\0\u5244\0\u5278\0\u52ac\0\u52e0\0\150\0\u5314\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c\0\u5480\0\u54b4\0\u54e8"+
    "\0\u551c\0\u5550\0\u5584\0\u55b8\0\u55ec\0\150\0\u5620\0\u5654"+
    "\0\u5688\0\u56bc\0\u56f0\0\150\0\u5724\0\u5758\0\u578c\0\150"+
    "\0\u57c0\0\u57f4\0\150\0\u5828\0\u585c\0\u5890\0\u58c4\0\u58f8"+
    "\0\u592c\0\150\0\u5960\0\u5994\0\150\0\u59c8\0\u59fc\0\u5a30"+
    "\0\u5a64\0\u5a98\0\u5acc\0\u5b00\0\u5b34\0\150\0\150\0\u5b68"+
    "\0\u5b9c\0\u5bd0\0\u5c04\0\150\0\150\0\150\0\u5c38\0\u5c6c"+
    "\0\150\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\31\3\1\14\1\15\4\3\1\16\7\3\1\17"+
    "\1\3\1\20\5\21\1\22\56\21\66\0\1\4\103\0"+
    "\1\23\26\0\1\24\1\23\7\0\1\23\13\0\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\0\1\33\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\1\43\1\44\1\45\77\0\1\46\11\0\5\21\1\0"+
    "\56\21\27\0\1\47\24\0\1\47\5\0\1\47\53\0"+
    "\1\50\31\0\1\51\4\0\1\52\5\0\1\53\60\0"+
    "\1\54\45\0\1\55\3\0\1\56\2\0\1\57\3\0"+
    "\1\60\2\0\1\61\2\0\1\62\46\0\1\63\72\0"+
    "\1\64\54\0\1\65\3\0\1\66\5\0\1\67\50\0"+
    "\1\70\10\0\1\71\1\72\12\0\1\73\57\0\1\74"+
    "\55\0\1\75\63\0\1\76\63\0\1\77\5\0\1\100"+
    "\56\0\1\101\44\0\1\102\63\0\1\103\3\0\1\104"+
    "\67\0\1\105\57\0\1\106\3\0\1\107\74\0\1\110"+
    "\1\111\103\0\1\112\31\0\1\113\27\0\1\113\7\0"+
    "\1\113\55\0\1\114\42\0\1\115\52\0\1\116\57\0"+
    "\1\117\102\0\1\120\54\0\1\121\64\0\1\122\52\0"+
    "\1\123\57\0\1\124\76\0\1\125\1\126\53\0\1\127"+
    "\100\0\1\130\52\0\1\131\55\0\1\132\63\0\1\133"+
    "\10\0\1\134\71\0\1\135\35\0\1\136\70\0\1\137"+
    "\66\0\1\140\100\0\1\141\65\0\1\142\47\0\1\143"+
    "\60\0\1\144\53\0\1\145\20\0\1\146\53\0\1\147"+
    "\61\0\1\150\102\0\1\151\1\152\44\0\1\153\100\0"+
    "\1\154\36\0\1\145\104\0\1\155\12\0\1\156\57\0"+
    "\1\157\53\0\1\160\74\0\1\161\72\0\1\162\63\0"+
    "\1\163\63\0\1\164\34\0\1\165\74\0\1\166\46\0"+
    "\1\167\101\0\1\170\64\0\1\171\67\0\1\172\42\0"+
    "\1\173\103\0\1\174\65\0\1\175\40\0\1\176\62\0"+
    "\1\177\2\0\1\200\64\0\1\201\73\0\1\202\56\0"+
    "\1\203\63\0\1\204\54\0\1\205\77\0\1\206\55\0"+
    "\1\207\61\0\1\210\103\0\1\211\62\0\1\212\50\0"+
    "\1\213\63\0\1\214\54\0\1\215\107\0\1\216\46\0"+
    "\1\217\53\0\1\220\105\0\1\221\51\0\1\222\77\0"+
    "\1\223\37\0\1\224\106\0\1\225\64\0\1\226\32\0"+
    "\1\227\70\0\1\230\127\0\1\231\41\0\1\232\21\0"+
    "\1\232\3\0\1\232\57\0\1\233\25\0\1\234\61\0"+
    "\1\235\112\0\1\236\45\0\1\237\64\0\1\240\66\0"+
    "\1\241\54\0\1\242\55\0\1\243\73\0\1\244\65\0"+
    "\1\245\66\0\1\246\46\0\1\247\61\0\1\250\71\0"+
    "\1\251\53\0\1\252\67\0\1\253\101\0\1\254\65\0"+
    "\1\255\43\0\1\256\106\0\1\257\44\0\1\260\63\0"+
    "\1\261\70\0\1\262\53\0\1\263\77\0\1\264\60\0"+
    "\1\265\63\0\1\266\61\0\1\267\75\0\1\270\53\0"+
    "\1\271\51\0\1\272\52\0\1\273\106\0\1\274\60\0"+
    "\1\275\71\0\1\276\105\0\1\277\36\0\1\300\24\0"+
    "\1\300\4\0\1\300\56\0\1\301\20\0\1\302\63\0"+
    "\1\303\106\0\1\304\33\0\1\305\123\0\1\306\46\0"+
    "\1\307\46\0\1\310\55\0\1\311\105\0\1\312\41\0"+
    "\1\313\123\0\1\314\45\0\1\315\55\0\1\316\71\0"+
    "\1\317\101\0\1\320\51\0\1\321\35\0\1\322\103\0"+
    "\1\323\65\0\1\324\41\0\1\325\74\0\1\326\64\0"+
    "\1\327\111\0\1\330\40\0\1\331\57\0\1\332\112\0"+
    "\1\333\45\0\1\334\52\0\1\335\75\0\1\336\40\0"+
    "\1\337\111\0\1\340\75\0\1\341\46\0\1\342\55\0"+
    "\1\343\114\0\1\344\35\0\1\345\25\0\1\345\6\0"+
    "\1\345\54\0\1\346\43\0\1\347\44\0\1\350\65\0"+
    "\1\351\102\0\1\352\33\0\1\353\106\0\1\354\45\0"+
    "\1\355\107\0\1\356\41\0\1\357\61\0\1\307\63\0"+
    "\1\360\65\0\1\361\11\0\1\362\65\0\1\363\45\0"+
    "\1\364\56\0\1\365\111\0\1\366\52\0\1\367\77\0"+
    "\1\370\41\0\1\371\54\0\1\372\37\0\1\373\35\0"+
    "\1\374\11\0\1\375\50\0\1\376\102\0\1\377\61\0"+
    "\1\u0100\52\0\1\u0101\100\0\1\u0102\31\0\1\u0103\106\0"+
    "\1\u0104\105\0\1\u0105\33\0\1\u0106\27\0\1\u0106\7\0"+
    "\1\u0106\53\0\1\u0107\56\0\1\u0108\40\0\1\u0109\102\0"+
    "\1\u010a\40\0\1\u010b\106\0\1\u010c\56\0\1\u010d\63\0"+
    "\1\u010e\51\0\1\u010f\74\0\1\u0110\63\0\1\u0111\60\0"+
    "\1\u0112\40\0\1\u0113\111\0\1\u0114\45\0\1\316\62\0"+
    "\1\u0115\103\0\1\u0116\41\0\1\u0117\65\0\1\u0118\77\0"+
    "\1\u0119\45\0\1\u011a\105\0\1\u011b\62\0\1\u011c\45\0"+
    "\1\u011d\63\0\1\u011e\70\0\1\u011f\46\0\1\u0120\37\0"+
    "\1\u0121\64\0\1\u0122\31\0\1\u0123\31\0\1\u0123\13\0"+
    "\1\u0123\47\0\1\u0124\31\0\1\u0125\77\0\1\u0126\70\0"+
    "\1\u0127\67\0\1\u0128\27\0\1\u0129\63\0\1\u012a\114\0"+
    "\1\u012b\37\0\1\u012c\116\0\1\u012d\34\0\1\u012e\62\0"+
    "\1\u012f\70\0\1\u0130\53\0\1\u0131\107\0\1\u0132\60\0"+
    "\1\u0133\42\0\1\u0134\104\0\1\u0135\64\0\1\u0136\34\0"+
    "\1\u0137\106\0\1\u0138\40\0\1\u0139\106\0\1\u013a\67\0"+
    "\1\u013b\41\0\1\u013c\1\0\1\u013d\12\0\1\u013e\106\0"+
    "\1\u013f\33\0\1\u0140\27\0\1\u0140\7\0\1\u0140\53\0"+
    "\1\u0141\41\0\1\u0142\62\0\1\u0143\64\0\1\u0144\70\0"+
    "\1\u0145\40\0\1\u0146\76\0\1\u0147\52\0\1\u0148\2\0"+
    "\1\u0149\16\0\1\u014a\37\0\1\u014b\73\0\1\u014c\71\0"+
    "\1\u014d\66\0\1\307\42\0\1\u014e\116\0\1\u014f\44\0"+
    "\1\u0150\63\0\1\u0151\71\0\1\u0152\63\0\1\u0153\34\0"+
    "\1\u0154\100\0\1\u0155\70\0\1\u0156\67\0\1\u0157\66\0"+
    "\1\u0158\104\0\1\u0159\41\0\1\u015a\21\0\1\u015a\2\0"+
    "\1\u015a\60\0\1\u015b\32\0\1\u015c\42\0\1\u015d\63\0"+
    "\1\u015e\106\0\1\u015f\66\0\1\u0160\46\0\1\u0161\75\0"+
    "\1\u0162\63\0\1\u0163\67\0\1\u0164\43\0\1\u0165\66\0"+
    "\1\u0166\51\0\1\u0167\111\0\1\u0168\44\0\1\u0169\2\0"+
    "\1\u016a\16\0\1\u016b\56\0\1\u016c\70\0\1\u016d\65\0"+
    "\1\u016e\70\0\1\u016f\31\0\1\u0170\105\0\1\u0171\44\0"+
    "\1\u0172\63\0\1\u0173\125\0\1\u0174\41\0\1\u0175\21\0"+
    "\1\u0175\1\0\1\u0175\61\0\1\u0176\34\0\1\u0177\37\0"+
    "\1\u0178\100\0\1\u0179\75\0\1\u017a\55\0\1\u017b\70\0"+
    "\1\u017c\66\0\1\u017d\47\0\1\u017e\63\0\1\u017f\63\0"+
    "\1\u0180\71\0\1\u0181\63\0\1\u0182\67\0\1\u0183\57\0"+
    "\1\u0184\60\0\1\u0185\66\0\1\u0186\47\0\1\u0187\2\0"+
    "\1\u0188\71\0\1\u0189\60\0\1\u018a\53\0\1\u018b\110\0"+
    "\1\u018c\73\0\1\u018d\31\0\1\u018e\31\0\1\u018e\12\0"+
    "\1\u018e\50\0\1\u018f\44\0\1\u0190\63\0\1\u0191\100\0"+
    "\1\u0192\47\0\1\u0193\60\0\1\u0194\47\0\1\u0195\101\0"+
    "\1\u0196\47\0\1\u012e\77\0\1\u0197\61\0\1\u0198\70\0"+
    "\1\u0199\66\0\1\u019a\32\0\1\u019b\70\0\1\u019c\104\0"+
    "\1\u019d\60\0\1\u019e\63\0\1\u019f\51\0\1\u01a0\65\0"+
    "\1\u01a1\57\0\1\u01a2\77\0\1\u01a3\37\0\1\u01a4\75\0"+
    "\1\u01a5\31\0\1\u01a5\11\0\1\u01a5\51\0\1\u01a6\42\0"+
    "\1\u01a7\41\0\1\u01a8\114\0\1\u01a9\55\0\1\u01aa\71\0"+
    "\1\u01ab\60\0\1\u01ac\57\0\1\u01ad\41\0\1\u01ae\107\0"+
    "\1\u01af\60\0\1\u01b0\47\0\1\u01b1\104\0\1\u01b2\45\0"+
    "\1\u01b3\74\0\1\u01b4\70\0\1\u01b5\35\0\1\u01b6\114\0"+
    "\1\u01b7\47\0\1\u01b8\46\0\1\u01b9\112\0\1\u01ba\21\0"+
    "\1\u01ba\3\0\1\u01ba\57\0\1\u01bb\23\0\1\u01bc\101\0"+
    "\1\u01bd\56\0\1\u01be\61\0\1\u01bf\60\0\1\u01c0\46\0"+
    "\1\u01c1\106\0\1\u01c2\71\0\1\u01c3\60\0\1\u01c4\52\0"+
    "\1\u01c5\46\0\1\u01c6\107\0\1\u01c7\60\0\1\u01c8\65\0"+
    "\1\u01c9\63\0\1\u01ca\62\0\1\u01cb\72\0\1\u01cc\43\0"+
    "\1\u01cd\57\0\1\u01ce\101\0\1\u01cf\62\0\1\u01d0\61\0"+
    "\1\u01d1\60\0\1\u01d2\71\0\1\u01d3\63\0\1\u01d4\71\0"+
    "\1\u01d5\32\0\1\u01d6\105\0\1\u01d7\71\0\1\u01d8\40\0"+
    "\1\u01d9\100\0\1\u01da\67\0\1\u01db\35\0\1\u01dc\74\0"+
    "\1\u01dd\57\0\1\u01de\101\0\1\u01df\40\0\1\u01e0\105\0"+
    "\1\u01e1\61\0\1\u01e2\43\0\1\u01e3\74\0\1\u01e4\100\0"+
    "\1\u01e5\65\0\1\u01e6\50\0\1\u01e7\70\0\1\u01e8\67\0"+
    "\1\u01e9\35\0\1\u01ea\74\0\1\u01eb\57\0\1\u01ec\56\0"+
    "\1\u01ed\100\0\1\u01ee\57\0\1\u01ef\75\0\1\u01f0\70\0"+
    "\1\u01f1\50\0\1\u01f2\70\0\1\u01f3\67\0\1\u01f4\60\0"+
    "\1\u01f5\40\0\1\u01f6\63\0\1\u01f7\74\0\1\u01f8\75\0"+
    "\1\u01f9\70\0\1\u01fa\50\0\1\u01fb\46\0\1\u01fc\63\0"+
    "\1\u01fd\63\0\1\u01fe\74\0\1\u01ff\75\0\1\u0200\40\0"+
    "\1\u0201\63\0\1\u0202\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\6\11\1\1\2\11\1\1\1\11"+
    "\113\0\1\11\6\0\1\11\61\0\1\11\43\0\1\11"+
    "\11\0\1\11\3\0\1\11\1\0\1\11\6\0\1\11"+
    "\2\0\1\11\11\0\1\11\13\0\1\11\11\0\1\11"+
    "\4\0\1\11\10\0\1\11\17\0\1\11\14\0\1\11"+
    "\10\0\2\11\14\0\1\11\1\0\1\11\32\0\1\11"+
    "\10\0\2\11\10\0\1\11\20\0\1\11\25\0\1\1"+
    "\14\0\1\11\10\0\1\11\3\0\1\11\5\0\1\11"+
    "\7\0\1\11\2\0\3\11\5\0\1\11\4\0\1\11"+
    "\17\0\1\11\5\0\1\11\3\0\1\11\2\0\1\11"+
    "\6\0\1\11\2\0\1\11\10\0\2\11\4\0\3\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	ErrorCommands errorCommands= new ErrorCommands(true);


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IndigoLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error en el lexema: "+yytext());
		String errorMessage = "Lexema no reconocido ";
		ErrorIndigo newError = new ErrorIndigo(errorMessage, yytext(), yyline+1, yycolumn+1);
		errorCommands.addError(newError);
		return new Symbol(DUNO,yyline+1, yycolumn+1,string.toString());
            }
            // fall through
          case 63: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 64: break;
          case 3:
            { System.out.print("Cadena: "+yytext());
				string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 65: break;
          case 4:
            { System.out.println("Token: ,");
				return new Symbol(COMA, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 66: break;
          case 5:
            { System.out.println("Token: :");
				return new Symbol(COLON, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 67: break;
          case 6:
            { System.out.println("Token: <");
				return new Symbol(LESS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 68: break;
          case 7:
            { System.out.println("Token: >");
				return new Symbol(GREATER, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 69: break;
          case 8:
            { System.out.println("Token: [");
				return new Symbol(OPEN_BRACKET, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 70: break;
          case 9:
            { System.out.println("Token: ]");
				return new Symbol(CLOSE_BRACKET, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 71: break;
          case 10:
            { System.out.println("Token: {");
				return new Symbol(OPEN_CURLY, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 72: break;
          case 11:
            { System.out.println("Token: }");
				return new Symbol(CLOSE_CURLY, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 73: break;
          case 12:
            { string.append(yytext());
            }
            // fall through
          case 74: break;
          case 13:
            { yybegin(YYINITIAL);
						String result = string.toString();
				                       	if(result.contains(" ")||result.contains("\n")||result.contains("\r")||result.contains("\t")){
								System.out.println(" CON ESPACIOS: "+string.toString()); 
								return new Symbol(TEXTWS,yyline+1, yycolumn+1,string.toString());
							}else{
								System.out.println(" SIN ESPACIOS: "+string.toString()); 
								return new Symbol(TEXTWIS,yyline+1, yycolumn+1,string.toString());
							}
            }
            // fall through
          case 75: break;
          case 14:
            { System.out.println("Token: ID");
						 return new Symbol(ID, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 76: break;
          case 15:
            { System.out.println("Token: Opcion Requerida: "+yytext()+"l");
					return new Symbol(BOOL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 77: break;
          case 16:
            { System.out.println("Token: URL");
						 return new Symbol(URL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 78: break;
          case 17:
            { System.out.println("Token: TEMA");
						 return new Symbol(TOPIC, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 79: break;
          case 18:
            { System.out.println("Token: BOTON");
						 return new Symbol(BUTTON, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 80: break;
          case 19:
            { System.out.println("Token: CLASE");
						 return new Symbol(CLASS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 81: break;
          case 20:
            { System.out.println("Token: COMBO");
						 return new Symbol(COMBO, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 82: break;
          case 21:
            { System.out.println("Token: FILAS");
						 return new Symbol(ROWS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 83: break;
          case 22:
            { System.out.println("Token: URL");
						 return new Symbol(INDEX, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 84: break;
          case 23:
            { System.out.println("Token: RADIO");
						 return new Symbol(RATIO, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 85: break;
          case 24:
            { System.out.println("Token: AlineacionComponente: "+yytext()+"l");
					return new Symbol(POSALIGNMENT, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 86: break;
          case 25:
            { System.out.println("Token: IMAGEN");
						 return new Symbol(IMAGE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 87: break;
          case 26:
            { System.out.println("Token: TEMA");
						 return new Symbol(NAME_F, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 88: break;
          case 27:
            { System.out.println("Token: NOMBRE");
						 return new Symbol(TITTLE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 89: break;
          case 28:
            { System.out.println("Token: FICHERO");
						 return new Symbol(FILE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 90: break;
          case 29:
            { System.out.println("Token: USUARIO");
						 return new Symbol(USER, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 91: break;
          case 30:
            { System.out.println("Token: CHECKBOX");
						 return new Symbol(CHECKBOX, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 92: break;
          case 31:
            { System.out.println("Token: COLUMNAS");
						 return new Symbol(COLS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 93: break;
          case 32:
            { System.out.println("Token: OPCIONES");
						 return new Symbol(OPTIONS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 94: break;
          case 33:
            { System.out.println("Token: PASSWORD");
						 return new Symbol(PASSWORD, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 95: break;
          case 34:
            { System.out.println("Token: REQUERIDO");
						 return new Symbol(REQUIRED, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 96: break;
          case 35:
            { System.out.println("Token: ALINEACION");
						 return new Symbol(ALIGNMENT, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 97: break;
          case 36:
            { System.out.println("Token: AREA_TEXTO");
						 return new Symbol(TEXT_AREA, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 98: break;
          case 37:
            { System.out.println("Token: FORMULARIO");
						 return new Symbol(FORM, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 99: break;
          case 38:
            { System.out.println("Token: CAMPO_TEXTO");
						 return new Symbol(TEXT_CAMP, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 100: break;
          case 39:
            { System.out.println("Token: !ini_solicitud ");
						 return new Symbol(APERTURE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 101: break;
          case 40:
            { System.out.println("Token: NOMBRE_CAMPO");
						 return new Symbol(NAME_C, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 102: break;
          case 41:
            { System.out.println("Token: fin_solicitud! ");
						 return new Symbol(END, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 103: break;
          case 42:
            { System.out.println("Token: CREAR_USUARIO");
						 return new Symbol(CREATE_U, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 104: break;
          case 43:
            { System.out.println("Token: LOGIN_USUARIO");
						 return new Symbol(LOGIN_U, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 105: break;
          case 44:
            { System.out.println("Token: TEXTO_VISIBLE");
						 return new Symbol(TEXTV, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 106: break;
          case 45:
            { System.out.println("Token: USUARIO_NUEVO");
						 return new Symbol(NEW_USER, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 107: break;
          case 46:
            { System.out.println("Token: !ini_solicitudes");
						return new Symbol(START, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 108: break;
          case 47:
            { System.out.println("Token: !fin_solicitudes");
						return new Symbol(FINAL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 109: break;
          case 48:
            { System.out.println("Token: FECHA_CREACION");
						 return new Symbol(DATE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 110: break;
          case 49:
            { System.out.println("Token: NUEVO_PASSWORD");
						 return new Symbol(NEW_PASSWORD, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 111: break;
          case 50:
            { System.out.println("Token: USUARIO_ANTIGUO");
						 return new Symbol(PAST_USER, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 112: break;
          case 51:
            { System.out.println("Token: ELIMINAR_USUARIO");
						 return new Symbol(DELETE_U, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 113: break;
          case 52:
            { System.out.println("Token: NUEVO_FORMULARIO");
						 return new Symbol(NEW_F, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 114: break;
          case 53:
            { System.out.println("Token: USUARIO");
						 return new Symbol(NEW_USER, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 115: break;
          case 54:
            { System.out.println("Token: MODIFICAR_USUARIO");
						 return new Symbol(MODIFY_U, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 116: break;
          case 55:
            { System.out.println("Token: AGREGAR_COMPONENTE");
						 return new Symbol(ADD_C, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 117: break;
          case 56:
            { System.out.println("Token: ELIMINAR_COMPONENTE");
						 return new Symbol(DELETE_C, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 118: break;
          case 57:
            { System.out.println("Token: ELIMINAR_FORMULARIO");
						 return new Symbol(DELETE_F, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 119: break;
          case 58:
            { System.out.println("Token: CREDENCIALES_USUARIO");
						 return new Symbol(CREDENTIAL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 120: break;
          case 59:
            { System.out.println("Token: MODIFICAR_COMPONENTE");
						 return new Symbol(MODIFY_C, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 121: break;
          case 60:
            { System.out.println("Token: MODIFICAR_FORMULARIO");
						 return new Symbol(MODIFY_F, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 122: break;
          case 61:
            { System.out.println("Token: PARAMETROS_COMPONENTE");
						 return new Symbol(C_PARAMETERS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 123: break;
          case 62:
            { System.out.println("Token: PARAMETROS_FORMULARIO");
						 return new Symbol(FORM_PARAMETERS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
