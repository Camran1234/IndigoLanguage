// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: saveForm.jflex

package com.mycompany.formsafe;
import java_cup.runtime.*;
import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;
import com.mycompany.handlers.ErrorCommands;
import com.mycompany.formats.ErrorIndigo;
import static com.mycompany.formsafe.symSqForm.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SqFormLexic implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\5\0\1\5\1\6\2\0\1\7\1\0"+
    "\1\10\13\0\1\11\6\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\4\0\1\43"+
    "\1\0\1\44\1\45\1\0\1\46\1\47\1\50\2\0"+
    "\1\51\2\0\1\52\1\53\1\54\1\55\2\0\1\56"+
    "\1\57\1\0\1\60\1\0\1\61\3\0\1\62\1\0"+
    "\1\63\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\3\1\1\10\1\11\1\12\1\13\107\0\1\14\57\0"+
    "\1\15\41\0\1\16\12\0\1\17\3\0\1\20\1\0"+
    "\1\21\2\0\1\22\1\0\1\23\13\0\1\24\14\0"+
    "\1\25\7\0\1\26\2\0\1\27\4\0\1\30\2\0"+
    "\1\31\14\0\1\32\7\0\1\33\2\0\1\34\11\0"+
    "\1\35\1\36\6\0\1\37\1\40\20\0\1\41\5\0"+
    "\1\42\1\0\1\43\1\44\1\0\1\45\1\46\11\0"+
    "\1\47\5\0\1\50\5\0\1\51\3\0\1\52\1\53"+
    "\1\54\1\55\1\56\5\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\150\0\150"+
    "\0\150\0\150\0\u0104\0\u0138\0\u016c\0\150\0\150\0\u01a0"+
    "\0\150\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\150\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\150\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04"+
    "\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4"+
    "\0\u2018\0\u204c\0\150\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\150\0\u2288\0\u22bc"+
    "\0\u22f0\0\150\0\u2324\0\150\0\u2358\0\u238c\0\150\0\u23c0"+
    "\0\150\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c"+
    "\0\u2560\0\u2594\0\u25c8\0\u25fc\0\150\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\150\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4"+
    "\0\u29d8\0\150\0\u2a0c\0\u2a40\0\150\0\u2a74\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\150\0\u2b44\0\u2b78\0\150\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4"+
    "\0\u2de8\0\150\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20"+
    "\0\u2f54\0\150\0\u2f88\0\u2fbc\0\150\0\u2ff0\0\u3024\0\u3058"+
    "\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\150\0\150"+
    "\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\150\0\150"+
    "\0\u32fc\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468"+
    "\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608"+
    "\0\150\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\150\0\u3740"+
    "\0\150\0\150\0\u3774\0\150\0\150\0\u37a8\0\u37dc\0\u3810"+
    "\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\150\0\u397c"+
    "\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\150\0\u3a80\0\u3ab4\0\u3ae8"+
    "\0\u3b1c\0\u3b50\0\150\0\u3b84\0\u3bb8\0\u3bec\0\150\0\150"+
    "\0\150\0\150\0\150\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0"+
    "\0\150\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\3\3\1\13\30\3\1\14\5\3\1\15\5\3"+
    "\1\16\1\17\4\20\1\21\57\20\66\0\1\4\73\0"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\0\1\30"+
    "\1\31\3\0\1\32\1\33\1\34\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\36\0\1\42\116\0\1\43\65\0"+
    "\1\44\14\0\4\20\1\0\57\20\25\0\1\45\5\0"+
    "\1\46\60\0\1\47\45\0\1\50\3\0\1\51\2\0"+
    "\1\52\3\0\1\53\2\0\1\54\51\0\1\55\101\0"+
    "\1\56\45\0\1\57\3\0\1\60\5\0\1\61\50\0"+
    "\1\62\10\0\1\63\13\0\1\64\57\0\1\65\55\0"+
    "\1\66\64\0\1\67\44\0\1\70\20\0\1\71\2\0"+
    "\1\72\37\0\1\73\3\0\1\74\67\0\1\75\57\0"+
    "\1\76\3\0\1\77\74\0\1\100\1\101\51\0\1\102"+
    "\76\0\1\103\36\0\1\104\134\0\1\105\24\0\1\106"+
    "\57\0\1\107\102\0\1\110\54\0\1\111\64\0\1\112"+
    "\52\0\1\113\57\0\1\114\76\0\1\115\1\116\70\0"+
    "\1\117\65\0\1\120\42\0\1\121\63\0\1\122\10\0"+
    "\1\123\71\0\1\124\73\0\1\125\32\0\1\126\103\0"+
    "\1\127\65\0\1\130\33\0\1\131\21\0\1\132\51\0"+
    "\1\133\103\0\1\134\51\0\1\135\54\0\1\136\65\0"+
    "\1\137\100\0\1\140\35\0\1\131\105\0\1\141\12\0"+
    "\1\142\57\0\1\143\53\0\1\144\74\0\1\145\61\0"+
    "\1\146\57\0\1\147\103\0\1\150\7\0\1\151\13\0"+
    "\1\152\102\0\1\153\46\0\1\154\101\0\1\155\64\0"+
    "\1\156\67\0\1\157\42\0\1\160\103\0\1\161\65\0"+
    "\1\162\40\0\1\163\66\0\1\164\100\0\1\165\51\0"+
    "\1\166\63\0\1\167\54\0\1\170\77\0\1\171\51\0"+
    "\1\172\2\0\1\173\64\0\1\174\101\0\1\175\62\0"+
    "\1\176\41\0\1\177\72\0\1\200\75\0\1\201\66\0"+
    "\1\202\51\0\1\203\60\0\1\204\77\0\1\205\37\0"+
    "\1\206\106\0\1\207\64\0\1\210\31\0\1\211\71\0"+
    "\1\212\73\0\1\213\75\0\1\214\104\0\1\215\65\0"+
    "\1\216\54\0\1\217\31\0\1\220\110\0\1\221\47\0"+
    "\1\222\64\0\1\223\66\0\1\224\54\0\1\225\55\0"+
    "\1\226\73\0\1\227\65\0\1\230\47\0\1\231\105\0"+
    "\1\232\37\0\1\233\67\0\1\234\101\0\1\235\65\0"+
    "\1\236\55\0\1\237\63\0\1\240\51\0\1\241\67\0"+
    "\1\242\63\0\1\243\74\0\1\244\60\0\1\245\73\0"+
    "\1\246\35\0\1\247\73\0\1\250\71\0\1\251\51\0"+
    "\1\252\51\0\1\253\107\0\1\254\60\0\1\255\71\0"+
    "\1\256\43\0\1\257\113\0\1\260\76\0\1\261\65\0"+
    "\1\262\60\0\1\263\20\0\1\264\106\0\1\265\32\0"+
    "\1\266\122\0\1\267\50\0\1\270\46\0\1\271\54\0"+
    "\1\272\106\0\1\273\40\0\1\274\100\0\1\275\56\0"+
    "\1\276\53\0\1\277\112\0\1\300\34\0\1\301\104\0"+
    "\1\302\64\0\1\303\70\0\1\304\57\0\1\305\52\0"+
    "\1\306\64\0\1\307\62\0\1\310\74\0\1\311\64\0"+
    "\1\312\70\0\1\313\42\0\1\314\53\0\1\315\112\0"+
    "\1\316\73\0\1\317\50\0\1\320\55\0\1\321\63\0"+
    "\1\322\74\0\1\323\103\0\1\324\54\0\1\325\75\0"+
    "\1\326\21\0\1\327\65\0\1\330\102\0\1\331\32\0"+
    "\1\332\107\0\1\333\45\0\1\334\63\0\1\270\106\0"+
    "\1\335\56\0\1\336\45\0\1\337\102\0\1\340\60\0"+
    "\1\341\41\0\1\342\112\0\1\343\52\0\1\344\45\0"+
    "\1\345\36\0\1\346\36\0\1\347\100\0\1\350\46\0"+
    "\1\351\51\0\1\352\101\0\1\353\100\0\1\354\30\0"+
    "\1\355\107\0\1\356\60\0\1\357\54\0\1\360\125\0"+
    "\1\361\61\0\1\362\60\0\1\363\32\0\1\364\102\0"+
    "\1\365\40\0\1\366\106\0\1\367\56\0\1\370\65\0"+
    "\1\371\31\0\1\372\112\0\1\373\60\0\1\374\71\0"+
    "\1\375\42\0\1\275\62\0\1\376\63\0\1\377\103\0"+
    "\1\u0100\44\0\1\u0101\52\0\1\u0102\74\0\1\u0103\70\0"+
    "\1\u0104\45\0\1\u0105\36\0\1\u0106\42\0\1\u0107\55\0"+
    "\1\u0108\121\0\1\u0109\62\0\1\u010a\72\0\1\u010b\33\0"+
    "\1\u010c\70\0\1\u010d\67\0\1\u010e\26\0\1\u010f\63\0"+
    "\1\u0110\112\0\1\u0111\52\0\1\u0112\70\0\1\u0113\61\0"+
    "\1\u0114\50\0\1\u0115\63\0\1\u0116\55\0\1\u0117\63\0"+
    "\1\u0118\107\0\1\u0119\67\0\1\u011a\43\0\1\u011b\64\0"+
    "\1\u011c\76\0\1\u011d\77\0\1\u011e\74\0\1\u011f\60\0"+
    "\1\u0120\40\0\1\u0121\64\0\1\u0122\70\0\1\u0123\40\0"+
    "\1\u0124\101\0\1\u0125\51\0\1\u0126\57\0\1\u0127\104\0"+
    "\1\270\56\0\1\u0128\41\0\1\u0129\101\0\1\u012a\74\0"+
    "\1\u012b\42\0\1\u012c\102\0\1\u012d\110\0\1\u012e\64\0"+
    "\1\u012f\50\0\1\u0130\23\0\1\u0131\63\0\1\u0132\107\0"+
    "\1\u0133\37\0\1\u0134\63\0\1\u0135\106\0\1\u0136\67\0"+
    "\1\u0137\61\0\1\u0138\45\0\1\u0139\66\0\1\u013a\62\0"+
    "\1\u013b\70\0\1\u013c\112\0\1\u013d\70\0\1\u013e\11\0"+
    "\1\u013f\114\0\1\u0140\50\0\1\u0141\71\0\1\u0142\60\0"+
    "\1\u0143\50\0\1\u0144\55\0\1\u0145\104\0\1\u0146\113\0"+
    "\1\u0147\57\0\1\u0148\30\0\1\u0149\75\0\1\u014a\37\0"+
    "\1\u014b\75\0\1\u014c\61\0\1\u014d\61\0\1\u014e\130\0"+
    "\1\u014f\61\0\1\u0150\12\0\1\u0151\63\0\1\u0152\63\0"+
    "\1\u0153\101\0\1\u0154\56\0\1\u0155\76\0\1\u0156\63\0"+
    "\1\u0157\62\0\1\u0158\70\0\1\u0159\33\0\1\u015a\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15652];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\4\11\3\1\2\11\1\1\1\11"+
    "\107\0\1\11\57\0\1\11\41\0\1\11\12\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\13\0\1\11\14\0\1\11\7\0\1\11\2\0\1\11"+
    "\4\0\1\11\2\0\1\11\14\0\1\11\7\0\1\11"+
    "\2\0\1\11\11\0\2\11\6\0\2\11\20\0\1\11"+
    "\5\0\1\11\1\0\2\11\1\0\2\11\11\0\1\11"+
    "\5\0\1\11\5\0\1\11\3\0\5\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	ErrorCommands errorCommands = new ErrorCommands(true);


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqFormLexic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Token: "+yytext());
	ErrorIndigo newError = new ErrorIndigo(yytext(), "ERROR", yyline+1, yycolumn+1);
	errorCommands.addError(newError);
	return new Symbol(DUNO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 49: break;
          case 2:
            { /*Do nothing*/
            }
            // fall through
          case 50: break;
          case 3:
            { System.out.println("Token Cadena "+yytext());
            string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 51: break;
          case 4:
            { System.out.println("Token: OPEN_PARENTHESIS");
        return new Symbol(OPEN_PARENTHESIS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 52: break;
          case 5:
            { System.out.println("Token: CLOSE_PARENTHESIS");
        return new Symbol(CLOSE_PARENTHESIS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 53: break;
          case 6:
            { System.out.println("Token: COMA");
        return new Symbol(COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 54: break;
          case 7:
            { System.out.println("Token: COLON");
        return new Symbol(COLON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 55: break;
          case 8:
            { System.out.println("Token: OPEN_CURLY");
        return new Symbol(OPEN_CURLY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 56: break;
          case 9:
            { System.out.println("Token: CLOSE_CURLY");
        return new Symbol(CLOSE_CURLY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 57: break;
          case 10:
            { string.append(yytext());
            }
            // fall through
          case 58: break;
          case 11:
            { yybegin(YYINITIAL);
						String result = string.toString();
				                       	if(result.contains(" ")||result.contains("\n")||result.contains("\r")||result.contains("\t")){
								System.out.println(" CON ESPACIOS: "+string.toString()); 
								return new Symbol(TEXT_WITHSPACES,yyline+1, yycolumn+1,string.toString());
							}else{
								System.out.println(" SIN ESPACIOS: "+string.toString()); 
								return new Symbol(TEXT_NOSPACES,yyline+1, yycolumn+1,string.toString());
							}
            }
            // fall through
          case 59: break;
          case 12:
            { System.out.println("Token: Opcion Requerida: "+yytext()+"l");
					return new Symbol(BOOL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 60: break;
          case 13:
            { System.out.println("Token: URL");
						 return new Symbol(URL, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 61: break;
          case 14:
            { System.out.println("Token: TOPIC");
        return new Symbol(TOPIC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 62: break;
          case 15:
            { System.out.println("Token: BOTON");
						 return new Symbol(BUTTON, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 63: break;
          case 16:
            { System.out.println("Token: CLASE");
						 return new Symbol(CLASSN, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 64: break;
          case 17:
            { System.out.println("Token: COMBO");
						 return new Symbol(COMBO, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 65: break;
          case 18:
            { System.out.println("Token: DATE");
        return new Symbol(DATE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 66: break;
          case 19:
            { System.out.println("Token: FILAS");
						 return new Symbol(ROWS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 67: break;
          case 20:
            { System.out.println("Token: RADIO");
						 return new Symbol(RATIO, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 68: break;
          case 21:
            { System.out.println("Token: AlineacionComponente: "+yytext()+"l");
					return new Symbol(POSALIGNMENT, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 69: break;
          case 22:
            { System.out.println("Token: IMAGEN");
						 return new Symbol(IMAGE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 70: break;
          case 23:
            { System.out.println("Token: NAME_C");
						 return new Symbol(NAME, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 71: break;
          case 24:
            { System.out.println("Token: FORMULARIO");
						 return new Symbol(PUBLIC, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 72: break;
          case 25:
            { System.out.println("Token: FORMTITTLE");
        return new Symbol(FORMTITTLE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 26:
            { System.out.println("Token: FICHERO");
						 return new Symbol(FILE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 74: break;
          case 27:
            { System.out.println("Token: FORMULARIO");
						 return new Symbol(PRIVATE, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 75: break;
          case 28:
            { System.out.println("Token: USER");
        return new Symbol(USER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 29:
            { System.out.println("Token: CHECKBOX");
						 return new Symbol(CHECKBOX, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 77: break;
          case 30:
            { System.out.println("Token: COLUMNAS");
						 return new Symbol(COLS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 78: break;
          case 31:
            { System.out.println("Token: OPCIONES");
						 return new Symbol(OPTIONS, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 79: break;
          case 32:
            { System.out.println("Token: PASSWORD");
        return new Symbol(PASSWORD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 33:
            { System.out.println("Token: REQUERIDO");
						 return new Symbol(REQUIRED, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 81: break;
          case 34:
            { System.out.println("Token: DBUSER");
        return new Symbol(DBUSER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 35:
            { System.out.println("Token: ALINEACION");
						 return new Symbol(ALIGNMENT, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 83: break;
          case 36:
            { System.out.println("Token: AREA_TEXTO");
						 return new Symbol(TEXT_AREA, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 84: break;
          case 37:
            { System.out.println("Token: STRUCT");
        return new Symbol(STRUCT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 38:
            { System.out.println("Token: FORMULARIO");
						 return new Symbol(FORM, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 86: break;
          case 39:
            { System.out.println("Token: CAMPO_TEXTO");
						 return new Symbol(TEXT_CAMP, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 87: break;
          case 40:
            { System.out.println("Token: FORMULARIO");
						 return new Symbol(VISIBILITY, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 88: break;
          case 41:
            { System.out.println("Token: NAME_C");
						 return new Symbol(NAME_C, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 89: break;
          case 42:
            { System.out.println("Token: DBFORM");
        return new Symbol(DBFORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 43:
            { System.out.println("Token: NEWFORM");
        return new Symbol(NEWFORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 44:
            { System.out.println("Token: ID_COMPONENT");
        return new Symbol(ID_COMPONENT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 45:
            { System.out.println("Token: IDFORM");
        return new Symbol(IDFORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 46:
            { System.out.println("Token: TEXTO_VISIBLE");
						 return new Symbol(TEXTV, yyline + 1, yycolumn + 1, yytext());
            }
            // fall through
          case 94: break;
          case 47:
            { System.out.println("Token: DATA");
        return new Symbol(DATA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 48:
            { System.out.println("Token: USER_CREATOR");
        return new Symbol(USER_CREATOR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
