
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.sqform;

import com.mycompany.formats.ErrorIndigo;
import java_cup.runtime.*;
import java.util.ArrayList;
import com.mycompany.handlers.*;
import com.mycompany.indigo.TokenHandler;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symSq.class;
}

  /** Default constructor. */
  @Deprecated
  public SqSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\007\000\002\005\007\000\002\006\005" +
    "\000\002\007\005\000\002\025\004\000\002\025\003\000" +
    "\002\025\005\000\002\025\004\000\002\010\004\000\002" +
    "\010\004\000\002\026\005\000\002\026\003\000\002\026" +
    "\005\000\002\011\004\000\002\011\004\000\002\012\006" +
    "\000\002\012\004\000\002\012\004\000\002\013\005\000" +
    "\002\013\004\000\002\014\007\000\002\014\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\017\005" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\004\000\002\022\004" +
    "\000\002\023\006\000\002\023\006\000\002\023\004\000" +
    "\002\024\007\000\002\024\007\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\003\004\004\005\001\002\000\010\003" +
    "\164\004\165\010\025\001\002\000\006\006\017\035\162" +
    "\001\002\000\004\002\ufff9\001\002\000\006\003\026\010" +
    "\025\001\002\000\004\002\160\001\002\000\006\003\013" +
    "\004\015\001\002\000\004\002\ufffa\001\002\000\006\003" +
    "\026\010\025\001\002\000\006\003\026\010\025\001\002" +
    "\000\006\006\017\036\020\001\002\000\004\002\ufff3\001" +
    "\002\000\004\007\022\001\002\000\004\005\021\001\002" +
    "\000\004\002\uffff\001\002\000\004\017\023\001\002\000" +
    "\004\005\024\001\002\000\006\003\ufffe\010\ufffe\001\002" +
    "\000\004\020\152\001\002\000\006\003\033\021\032\001" +
    "\002\000\006\003\033\021\032\001\002\000\006\003\013" +
    "\004\015\001\002\000\004\002\ufff4\001\002\000\004\007" +
    "\146\001\002\000\010\004\041\011\040\021\036\001\002" +
    "\000\010\002\ufff1\003\ufff1\004\ufff1\001\002\000\004\004" +
    "\041\001\002\000\004\007\047\001\002\000\010\002\uffed" +
    "\003\uffed\004\uffed\001\002\000\004\013\045\001\002\000" +
    "\004\016\043\001\002\000\010\002\uffee\003\uffee\004\uffee" +
    "\001\002\000\004\005\044\001\002\000\010\002\ufffb\003" +
    "\ufffb\004\ufffb\001\002\000\004\011\046\001\002\000\004" +
    "\004\ufffc\001\002\000\006\003\052\014\051\001\002\000" +
    "\010\002\uffec\003\uffec\004\uffec\001\002\000\004\023\141" +
    "\001\002\000\006\003\054\012\053\001\002\000\010\003" +
    "\137\013\063\024\057\001\002\000\014\003\062\013\063" +
    "\014\061\024\057\040\060\001\002\000\004\014\056\001" +
    "\002\000\014\002\uffe9\003\uffe9\004\uffe9\011\uffe9\021\uffe9" +
    "\001\002\000\006\013\127\015\125\001\002\000\004\012" +
    "\134\001\002\000\004\015\133\001\002\000\012\003\071" +
    "\013\127\015\125\024\072\001\002\000\010\003\066\014" +
    "\061\040\060\001\002\000\010\003\066\014\061\040\060" +
    "\001\002\000\016\002\uffe6\003\uffe6\004\uffe6\011\uffe6\014" +
    "\uffe6\021\uffe6\001\002\000\006\003\071\024\072\001\002" +
    "\000\016\002\uffe7\003\uffe7\004\uffe7\011\uffe7\014\uffe7\021" +
    "\uffe7\001\002\000\020\002\uffd5\003\uffd5\004\uffd5\011\uffd5" +
    "\014\uffd5\021\uffd5\040\uffd5\001\002\000\012\013\107\032" +
    "\105\033\111\034\106\001\002\000\016\004\077\005\074" +
    "\027\100\030\101\031\075\037\076\001\002\000\006\025" +
    "\102\026\103\001\002\000\006\025\uffd9\026\uffd9\001\002" +
    "\000\006\025\uffdb\026\uffdb\001\002\000\006\025\uffd8\026" +
    "\uffd8\001\002\000\006\025\uffda\026\uffda\001\002\000\006" +
    "\025\uffdd\026\uffdd\001\002\000\006\025\uffdc\026\uffdc\001" +
    "\002\000\012\013\107\032\105\033\111\034\106\001\002" +
    "\000\012\013\107\032\105\033\111\034\106\001\002\000" +
    "\020\002\uffd3\003\uffd3\004\uffd3\011\uffd3\014\uffd3\021\uffd3" +
    "\040\uffd3\001\002\000\004\024\uffe0\001\002\000\004\024" +
    "\uffde\001\002\000\004\014\120\001\002\000\004\024\112" +
    "\001\002\000\004\024\uffdf\001\002\000\016\004\077\005" +
    "\074\027\100\030\101\031\075\037\076\001\002\000\006" +
    "\025\114\026\115\001\002\000\012\013\107\032\105\033" +
    "\111\034\106\001\002\000\012\013\107\032\105\033\111" +
    "\034\106\001\002\000\020\002\uffd0\003\uffd0\004\uffd0\011" +
    "\uffd0\014\uffd0\021\uffd0\040\uffd0\001\002\000\020\002\uffd1" +
    "\003\uffd1\004\uffd1\011\uffd1\014\uffd1\021\uffd1\040\uffd1\001" +
    "\002\000\004\015\121\001\002\000\020\002\uffcf\003\uffcf" +
    "\004\uffcf\011\uffcf\014\uffcf\021\uffcf\040\uffcf\001\002\000" +
    "\020\002\uffd4\003\uffd4\004\uffd4\011\uffd4\014\uffd4\021\uffd4" +
    "\040\uffd4\001\002\000\020\002\uffd2\003\uffd2\004\uffd2\011" +
    "\uffd2\014\uffd2\021\uffd2\040\uffd2\001\002\000\020\002\uffe4" +
    "\003\uffe4\004\uffe4\011\uffe4\014\uffe4\021\uffe4\040\uffe4\001" +
    "\002\000\004\024\131\001\002\000\020\002\uffe3\003\uffe3" +
    "\004\uffe3\011\uffe3\014\uffe3\021\uffe3\040\uffe3\001\002\000" +
    "\010\003\066\014\061\040\060\001\002\000\020\002\uffe1" +
    "\003\uffe1\004\uffe1\011\uffe1\014\uffe1\021\uffe1\040\uffe1\001" +
    "\002\000\006\013\127\015\125\001\002\000\020\002\uffe2" +
    "\003\uffe2\004\uffe2\011\uffe2\014\uffe2\021\uffe2\040\uffe2\001" +
    "\002\000\020\002\uffd6\003\uffd6\004\uffd6\011\uffd6\014\uffd6" +
    "\021\uffd6\040\uffd6\001\002\000\006\003\071\024\072\001" +
    "\002\000\020\002\uffd7\003\uffd7\004\uffd7\011\uffd7\014\uffd7" +
    "\021\uffd7\040\uffd7\001\002\000\020\002\uffe5\003\uffe5\004" +
    "\uffe5\011\uffe5\014\uffe5\021\uffe5\040\uffe5\001\002\000\006" +
    "\013\127\015\125\001\002\000\016\002\uffe8\003\uffe8\004" +
    "\uffe8\011\uffe8\014\uffe8\021\uffe8\001\002\000\004\022\142" +
    "\001\002\000\004\024\143\001\002\000\006\003\054\012" +
    "\053\001\002\000\014\002\uffea\003\uffea\004\uffea\011\uffea" +
    "\021\uffea\001\002\000\010\002\uffeb\003\uffeb\004\uffeb\001" +
    "\002\000\006\003\052\014\051\001\002\000\006\011\040" +
    "\021\036\001\002\000\010\002\uffef\003\uffef\004\uffef\001" +
    "\002\000\010\002\ufff0\003\ufff0\004\ufff0\001\002\000\004" +
    "\007\153\001\002\000\004\012\154\001\002\000\004\010" +
    "\155\001\002\000\006\003\ufffd\021\ufffd\001\002\000\006" +
    "\003\013\004\015\001\002\000\004\002\ufff2\001\002\000" +
    "\004\002\001\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\004\005\163\001\002\000\006\003\000\004\000\001" +
    "\002\000\010\003\172\010\025\021\032\001\002\000\004" +
    "\006\017\001\002\000\006\002\ufff5\004\ufff5\001\002\000" +
    "\006\002\ufff7\004\170\001\002\000\004\036\020\001\002" +
    "\000\004\002\ufff8\001\002\000\012\003\033\004\041\011" +
    "\040\021\173\001\002\000\004\007\174\001\002\000\006" +
    "\003\052\014\051\001\002\000\010\002\uffec\011\040\021" +
    "\036\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\012\002\010\004\006\010\005\025\007\001" +
    "\001\000\012\004\006\005\026\010\166\011\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\026\011" +
    "\160\001\001\000\002\001\001\000\010\003\015\004\013" +
    "\026\011\001\001\000\002\001\001\000\006\005\026\011" +
    "\155\001\001\000\006\005\026\011\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\150\001" +
    "\001\000\004\012\033\001\001\000\010\003\015\004\013" +
    "\026\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\034\007\036\013\041\001\001\000\002\001\001" +
    "\000\004\007\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\054\001\001\000\004\016" +
    "\137\001\001\000\006\016\063\022\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\125\023\067" +
    "\001\001\000\004\022\123\001\001\000\004\022\066\001" +
    "\001\000\002\001\001\000\004\023\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\107\024\122\001" +
    "\001\000\004\021\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\107" +
    "\024\121\001\001\000\006\020\107\024\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\112\001\001\000\002\001\001\000\006\020\107\024\116" +
    "\001\001\000\006\020\107\024\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\127\001\001" +
    "\000\002\001\001\000\004\017\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\146\001\001\000\006\006\034\013\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\015\004\013\026\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\026\011\165\012\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\034\007" +
    "\036\012\150\013\041\001\001\000\002\001\001\000\004" +
    "\014\174\001\001\000\006\006\034\013\147\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ConsultCommands consultCommands = new ConsultCommands();
    ErrorCommands errorCommands = new ErrorCommands(false);

    public ErrorCommands getErrorCommands(){
        return errorCommands;
    }

    public ConsultCommands getConsultCommands(){
        return consultCommands;
    }

    @Override
	public void syntax_error(Symbol symbol){
		/*
		//This code works better with report_error(String message, Object info) method
		if (info instanceof String){
			errors++; 
			System.err.println("  "+ errors + "==> " + info + " "+ message + 
							"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
		}
		else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol) 
			m.append( "("+info.toString()+")" );     
			m.append(" : "+message);   
			System.err.println(m);
		}*/
    	report_expected_token_ids();
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            String errorArmado="";
            TokenHandler tokenHandler = new TokenHandler();
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                errorArmado += tokenHandler.expectedFormIndigo(symbl_name_from_id(expected_token_ids().get(index)));
            }
            String error = "Se esperaba la forma: " + errorArmado;
			errorCommands.addError(new ErrorIndigo(error,token, line, column));
            System.out.println("Error en token:"+token+"\n"+error+" \n Linea: "+line+", Columna: "+column);
	}
	@Override
	public void unrecovered_syntax_error(Symbol symbol){
		syntax_error(symbol);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqSyntax$actions {
  private final SqSyntax parser;

  /** Constructor */
  CUP$SqSyntax$actions(SqSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqSyntax$do_action_part00000000(
    int                        CUP$SqSyntax$act_num,
    java_cup.runtime.lr_parser CUP$SqSyntax$parser,
    java.util.Stack            CUP$SqSyntax$stack,
    int                        CUP$SqSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqSyntax$result;

      /* select the action based on the action number */
      switch (CUP$SqSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= beginning EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		RESULT = start_val;
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqSyntax$parser.done_parsing();
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // multiple_start ::= LESS GREATEAPERTURE GREATER 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("multiple_start",0, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // multiple_close ::= LESS GREATCLOSE GREATER 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("multiple_close",1, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // raw_start ::= LESS APERTURE COLON CONSULTDATA GREATER 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("raw_start",2, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // open_request ::= OPEN_CURLY INQUIRIES COLON OPEN_BRACKET OPEN_CURLY 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("open_request",3, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // close_request ::= CLOSE_CURLY CLOSE_BRACKET CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("close_request",4, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // raw_close ::= LESS END GREATER 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("raw_close",5, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // beginning ::= multiple_start sentence_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("beginning",19, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // beginning ::= sentence 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("beginning",19, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // beginning ::= error sentence multiple_close 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("beginning",19, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // beginning ::= error sentence 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("beginning",19, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentence ::= raw_start consult 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("sentence",6, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentence ::= error consult 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("sentence",6, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentence_re ::= raw_start consult sentence_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("sentence_re",20, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentence_re ::= multiple_close 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("sentence_re",20, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentence_re ::= error consult sentence_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("sentence_re",20, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // consult ::= open_request consult_data 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult",7, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // consult ::= error consult_data 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult",7, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // consult_data ::= CONSULT COLON operation consult_data_re 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).value;
		
                Symbol sym = cur_token;
                int row = sym.left;
                int column = sym.right;
                consultCommands.addConsult(String.valueOf(text));
               consultCommands.close(String.valueOf(sym.value),row,column);
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult_data",8, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // consult_data ::= error consult_data_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult_data",8, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // consult_data ::= error raw_close 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult_data",8, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // consult_data_re ::= CONSULT COLON operation 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).value;
		
                Symbol sym = cur_token;
                int row = sym.left;
                int column = sym.right;
                consultCommands.addConsult(String.valueOf(text));
                consultCommands.close(String.valueOf(sym.value),row,column);
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult_data_re",9, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // consult_data_re ::= close_request raw_close 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("consult_data_re",9, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= QUOTE_D SELECT TO TEXT to_camps 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		System.out.println("In select");consultCommands.addIdForm(String.valueOf(text));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= error to_camps QUOTE_D 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // to_camps ::= OPEN_BRACKET camps 
            {
              Object RESULT =null;
		System.out.println("In to_camps");
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("to_camps",11, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // to_camps ::= error camps conditions 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("to_camps",11, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // to_camps ::= error conditions 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("to_camps",11, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // camps ::= TEXT camps_re 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		System.out.println("camps 1");consultCommands.addCamp(String.valueOf(text));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("camps",12, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // camps ::= CLOSE_BRACKET conditions 
            {
              Object RESULT =null;
		System.out.println("no camps"); 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("camps",12, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // camps ::= error camps_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("camps",12, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // camps_re ::= COMA TEXT camps_re 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		System.out.println("camps 2");consultCommands.addCamp(String.valueOf(text));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("camps_re",13, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // camps_re ::= CLOSE_BRACKET conditions 
            {
              Object RESULT =null;
		System.out.println("stop camps");
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("camps_re",13, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logic_operators ::= AND 
            {
              Object RESULT =null;
		RESULT="AND"; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("logic_operators",14, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logic_operators ::= OR 
            {
              Object RESULT =null;
		RESULT="OR";
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("logic_operators",14, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logic_operators ::= NOT 
            {
              Object RESULT =null;
		RESULT="NOT"; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("logic_operators",14, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operators ::= MORE_THAN 
            {
              Object RESULT =null;
		RESULT=">="; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operators ::= LESSER_THAN 
            {
              Object RESULT =null;
		RESULT="<="; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operators ::= DIFFERENCE 
            {
              Object RESULT =null;
		RESULT="!="; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operators ::= LESS 
            {
              Object RESULT =null;
		RESULT="<"; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operators ::= GREATER 
            {
              Object RESULT =null;
		RESULT=">"; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operators ::= EQUAL 
            {
              Object RESULT =null;
		RESULT="="; 
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("operators",15, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conditions ::= WHERE OPEN_BRACKET new_condition 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conditions ::= QUOTE_D COMA 
            {
              Object RESULT =null;
		System.out.println("in conditions QUOTE_D"); consultCommands.addNewConsult();
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conditions ::= error new_condition 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // new_condition ::= TEXT operators NUMBER new_condition_re 
            {
              Object RESULT =null;
		int campleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		consultCommands.addComparation(String.valueOf(camp),String.valueOf(operator).replace("\"",""),String.valueOf(num));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition",17, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // new_condition ::= TEXT operators SPECIFICATION new_condition_re 
            {
              Object RESULT =null;
		int campleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object spec = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		consultCommands.addComparation(String.valueOf(camp),String.valueOf(operator).replace("\"",""),String.valueOf(spec));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition",17, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // new_condition ::= error new_condition_re 
            {
              Object RESULT =null;

              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition",17, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // new_condition_re ::= logic_operators TEXT operators NUMBER new_condition_re 
            {
              Object RESULT =null;
		int logicleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).left;
		int logicright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).right;
		Object logic = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).value;
		int campleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		consultCommands.addLogicComparation(String.valueOf(logic).replace("\"",""),String.valueOf(camp),String.valueOf(operator).replace("\"",""),String.valueOf(num));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition_re",18, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // new_condition_re ::= logic_operators TEXT operators SPECIFICATION new_condition_re 
            {
              Object RESULT =null;
		int logicleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).left;
		int logicright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).right;
		Object logic = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)).value;
		int campleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).right;
		Object spec = (Object)((java_cup.runtime.Symbol) CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-1)).value;
		consultCommands.addLogicComparation(String.valueOf(logic).replace("\"",""),String.valueOf(camp),String.valueOf(operator).replace("\"",""),String.valueOf(spec));
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition_re",18, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // new_condition_re ::= CLOSE_BRACKET QUOTE_D COMA 
            {
              Object RESULT =null;
		consultCommands.addNewConsult();
              CUP$SqSyntax$result = parser.getSymbolFactory().newSymbol("new_condition_re",18, ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.elementAt(CUP$SqSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqSyntax$stack.peek()), RESULT);
            }
          return CUP$SqSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqSyntax$do_action(
    int                        CUP$SqSyntax$act_num,
    java_cup.runtime.lr_parser CUP$SqSyntax$parser,
    java.util.Stack            CUP$SqSyntax$stack,
    int                        CUP$SqSyntax$top)
    throws java.lang.Exception
    {
              return CUP$SqSyntax$do_action_part00000000(
                               CUP$SqSyntax$act_num,
                               CUP$SqSyntax$parser,
                               CUP$SqSyntax$stack,
                               CUP$SqSyntax$top);
    }
}

}
