
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package filemanager;

import Parameter.*;
import Parameter.ParameterHandler;
import Parameter.TokenHandler;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ResponseSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symResponse.class;
}

  /** Default constructor. */
  @Deprecated
  public ResponseSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ResponseSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ResponseSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\007\000" +
    "\002\006\005\000\002\007\006\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\012" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\006" +
    "\000\002\014\003\000\002\014\004\000\002\015\007\000" +
    "\002\015\003\000\002\015\004\000\002\016\005\000\002" +
    "\016\005\000\002\017\005\000\002\017\002\000\002\017" +
    "\005\000\002\020\006\000\002\020\002\000\002\021\007" +
    "\000\002\021\003\000\002\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\003\005\011\011\001\002\000\006\003" +
    "\124\011\077\001\002\000\010\003\074\011\077\014\021" +
    "\001\002\000\004\002\071\001\002\000\004\002\ufff4\001" +
    "\002\000\006\003\023\014\021\001\002\000\006\021\014" +
    "\023\013\001\002\000\004\002\ufff5\001\002\000\004\012" +
    "\020\001\002\000\004\013\015\001\002\000\004\026\016" +
    "\001\002\000\004\012\017\001\002\000\006\003\ufff9\014" +
    "\ufff9\001\002\000\006\003\000\011\000\001\002\000\004" +
    "\025\066\001\002\000\004\011\063\001\002\000\010\003" +
    "\026\014\025\017\uffe6\001\002\000\010\003\026\014\025" +
    "\017\uffe6\001\002\000\020\003\037\004\035\005\042\006" +
    "\033\007\036\010\040\015\043\001\002\000\020\003\037" +
    "\004\035\005\042\006\033\007\036\010\040\015\043\001" +
    "\002\000\004\017\031\001\002\000\004\011\uffe9\001\002" +
    "\000\004\015\032\001\002\000\004\011\ufff6\001\002\000" +
    "\004\013\ufffc\001\002\000\004\013\052\001\002\000\004" +
    "\013\ufffe\001\002\000\004\013\ufffb\001\002\000\020\003" +
    "\037\004\035\005\042\006\033\007\036\010\040\015\043" +
    "\001\002\000\004\013\ufffa\001\002\000\006\017\uffe3\020" +
    "\044\001\002\000\004\013\ufffd\001\002\000\006\017\uffe1" +
    "\020\uffe1\001\002\000\004\014\046\001\002\000\004\017" +
    "\uffe5\001\002\000\020\003\037\004\035\005\042\006\033" +
    "\007\036\010\040\015\043\001\002\000\006\017\uffe3\020" +
    "\044\001\002\000\004\017\uffe4\001\002\000\006\017\uffe0" +
    "\020\uffe0\001\002\000\004\026\053\001\002\000\004\020" +
    "\054\001\002\000\020\003\037\004\035\005\042\006\033" +
    "\007\036\010\040\015\043\001\002\000\006\017\uffe2\020" +
    "\uffe2\001\002\000\006\017\uffe3\020\044\001\002\000\004" +
    "\017\uffe7\001\002\000\004\017\031\001\002\000\004\011" +
    "\uffe8\001\002\000\004\002\ufff1\001\002\000\004\022\064" +
    "\001\002\000\004\012\065\001\002\000\012\002\ufff8\003" +
    "\ufff8\011\ufff8\020\ufff8\001\002\000\004\013\067\001\002" +
    "\000\004\016\070\001\002\000\010\003\ufff7\014\ufff7\017" +
    "\ufff7\001\002\000\004\002\001\001\002\000\006\002\uffee" +
    "\011\uffee\001\002\000\004\011\063\001\002\000\014\003" +
    "\121\011\110\014\025\017\uffe6\020\104\001\002\000\004" +
    "\011\110\001\002\000\006\003\023\014\021\001\002\000" +
    "\006\021\014\024\100\001\002\000\004\012\101\001\002" +
    "\000\006\002\uffff\011\uffff\001\002\000\004\011\063\001" +
    "\002\000\010\003\107\011\110\020\104\001\002\000\004" +
    "\011\113\001\002\000\006\002\uffeb\011\uffeb\001\002\000" +
    "\006\002\uffef\011\uffef\001\002\000\010\003\107\011\110" +
    "\020\104\001\002\000\004\024\100\001\002\000\006\002" +
    "\uffea\011\uffea\001\002\000\006\003\023\014\021\001\002" +
    "\000\004\021\014\001\002\000\004\011\063\001\002\000" +
    "\010\003\107\011\110\020\104\001\002\000\006\002\uffec" +
    "\011\uffec\001\002\000\004\002\ufff2\001\002\000\006\002" +
    "\uffed\011\uffed\001\002\000\024\003\122\004\035\005\042" +
    "\006\033\007\036\010\040\011\110\015\043\020\104\001" +
    "\002\000\024\003\122\004\035\005\042\006\033\007\036" +
    "\010\040\011\110\015\043\020\104\001\002\000\004\002" +
    "\ufff0\001\002\000\010\003\107\011\110\020\104\001\002" +
    "\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\014\002\003\005\007\011\005\012\011\013" +
    "\006\001\001\000\010\003\071\005\075\014\124\001\001" +
    "\000\014\003\071\005\075\007\023\014\074\016\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\023" +
    "\016\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\061\001\001\000\004\017\057\001\001" +
    "\000\004\017\026\001\001\000\006\004\033\021\055\001" +
    "\001\000\006\004\033\021\040\001\001\000\004\010\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\033\021\050\001\001\000" +
    "\002\001\001\000\004\020\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\033\021\046\001\001\000\004\020\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\033\021\054\001\001\000\002" +
    "\001\001\000\004\020\056\001\001\000\002\001\001\000" +
    "\004\010\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\122\001\001\000" +
    "\010\003\104\015\117\017\057\001\001\000\004\003\116" +
    "\001\001\000\006\007\023\016\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\102" +
    "\001\001\000\006\003\104\015\105\001\001\000\004\005" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\104\015\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\023\016\113\001\001\000\002\001\001" +
    "\000\004\006\114\001\001\000\006\003\104\015\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\104\004\033\015\110\021\040\001\001\000" +
    "\012\003\104\004\033\015\110\021\050\001\001\000\002" +
    "\001\001\000\006\003\104\015\117\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ResponseSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ResponseSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ResponseSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<ParameterHandler> handlers = new ArrayList<>();
    ParameterHandler parameter = new ParameterHandler();    
    ErrorCommands errorCommands = new ErrorCommands(false);

    public ErrorCommands getErrorCommands(){
        return errorCommands;
    }

    public ArrayList<ParameterHandler> getParametersHandlers(){
        System.out.println("Size del handler"+handlers.size());
        return handlers;
    }
    


    @Override
	public void syntax_error(Symbol symbol){
    	report_expected_token_ids();
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            String errorArmado="";
            TokenHandler tokenHandler = new TokenHandler();
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                errorArmado += tokenHandler.expectedFormIndigo(symbl_name_from_id(expected_token_ids().get(index))) + " o ";
            }
            String error = "Se esperaba la forma Sintactica: " + errorArmado;
			errorCommands.addError(new ErrorIndigo(error,token, line, column));
            System.out.println("Error en token:"+token+"\n"+error+" \n Linea: "+line+", Columna: "+column);
	}
	@Override
	public void unrecovered_syntax_error(Symbol symbol){
		syntax_error(symbol);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ResponseSyntax$actions {
  private final ResponseSyntax parser;

  /** Constructor */
  CUP$ResponseSyntax$actions(ResponseSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ResponseSyntax$do_action_part00000000(
    int                        CUP$ResponseSyntax$act_num,
    java_cup.runtime.lr_parser CUP$ResponseSyntax$parser,
    java.util.Stack            CUP$ResponseSyntax$stack,
    int                        CUP$ResponseSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ResponseSyntax$result;

      /* select the action based on the action number */
      switch (CUP$ResponseSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= F EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)).value;
		RESULT = start_val;
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ResponseSyntax$parser.done_parsing();
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // great_start ::= LESS GREATAPERTURE GREATER 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("great_start",0, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // great_close ::= LESS GREATCLOSE GREATER 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("great_close",1, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // option_request ::= ERROR 
            {
              Object RESULT =null;
		RESULT = "ERROR";
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("option_request",2, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // option_request ::= OUT 
            {
              Object RESULT =null;
		RESULT = "TEXT";
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("option_request",2, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // option_request ::= WARNING 
            {
              Object RESULT =null;
		RESULT = "WARNING";
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("option_request",2, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // option_request ::= ROW 
            {
              Object RESULT =null;
		RESULT = "ROW";
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("option_request",2, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // option_request ::= COL 
            {
              Object RESULT =null;
		RESULT = "COL";
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("option_request",2, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_start ::= LESS APERTURE COLON TEXT GREATER 
            {
              Object RESULT =null;
		handlers.add(parameter); 
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("simple_start",3, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_close ::= LESS END GREATER 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("simple_close",4, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // start_request ::= OPEN_CURLY BLOCK_PARAMETER COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("start_request",5, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // close_request ::= CLOSE_BRACKET CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("close_request",6, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // F ::= multiple_start 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= request 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // multiple_start ::= great_start request_re 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("multiple_start",8, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // multiple_start ::= error request_re great_close 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("multiple_start",8, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // request ::= simple_start init_block_parameter simple_close 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request",9, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // request ::= error init_block_parameter simple_close 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request",9, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // request_re ::= simple_start init_block_parameter simple_close request_alpha 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_re",10, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // request_re ::= great_close 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_re",10, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // request_re ::= error request_alpha 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_re",10, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // request_alpha ::= COMA simple_start init_block_parameter simple_close request_alpha 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_alpha",11, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // request_alpha ::= great_close 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_alpha",11, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // request_alpha ::= error request_alpha 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("request_alpha",11, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_block_parameter ::= start_request parameter_comision close_request 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("init_block_parameter",12, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_block_parameter ::= error parameter_comision close_request 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("init_block_parameter",12, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_comision ::= OPEN_CURLY parameter parameter_re 
            {
              Object RESULT =null;
		parameter.startNewListParameters();
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter_comision",13, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_comision ::= 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter_comision",13, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_comision ::= error parameter parameter_re 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter_comision",13, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_re ::= COMA OPEN_CURLY parameter parameter_re 
            {
              Object RESULT =null;
		parameter.startNewListParameters();
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter_re",14, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_re ::= 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter_re",14, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= option_request COLON TEXT COMA parameter 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-2)).value;
		parameter.addParameter(String.valueOf(result), String.valueOf(text));
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= CLOSE_CURLY 
            {
              Object RESULT =null;
		parameter.startNewListParameters();
              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= error parameter 
            {
              Object RESULT =null;

              CUP$ResponseSyntax$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.elementAt(CUP$ResponseSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseSyntax$stack.peek()), RESULT);
            }
          return CUP$ResponseSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ResponseSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ResponseSyntax$do_action(
    int                        CUP$ResponseSyntax$act_num,
    java_cup.runtime.lr_parser CUP$ResponseSyntax$parser,
    java.util.Stack            CUP$ResponseSyntax$stack,
    int                        CUP$ResponseSyntax$top)
    throws java.lang.Exception
    {
              return CUP$ResponseSyntax$do_action_part00000000(
                               CUP$ResponseSyntax$act_num,
                               CUP$ResponseSyntax$parser,
                               CUP$ResponseSyntax$stack,
                               CUP$ResponseSyntax$top);
    }
}

}
