
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.formsafe;

import com.mycompany.formats.*;
import com.mycompany.handlers.*;
import com.mycompany.indigo.TokenHandler;
import java.text.SimpleDateFormat;
import java.util.Date;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqFormSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symSqForm.class;
}

  /** Default constructor. */
  @Deprecated
  public SqFormSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqFormSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqFormSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\003\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\002\004\000\002\024\004\000\002\024\004\000" +
    "\002\025\005\000\002\025\003\000\002\025\005\000\002" +
    "\026\006\000\002\026\003\000\002\027\006\000\002\027" +
    "\004\000\002\030\007\000\002\030\007\000\002\030\007" +
    "\000\002\030\003\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\004\000\002\005\005\000\002" +
    "\005\003\000\002\005\005\000\002\005\003\000\002\006" +
    "\010\000\002\006\004\000\002\031\003\000\002\031\003" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\003\000\002\010\005\000\002\010\004\000\002\011" +
    "\007\000\002\011\006\000\002\011\004\000\002\012\004" +
    "\000\002\012\002\000\002\012\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\023\006\000\002\014\007\000\002\014\007" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\007\000\002\014" +
    "\007\000\002\014\007\000\002\014\007\000\002\014\003" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\004\000\002\017\005\000\002\017\005\000\002" +
    "\020\004\000\002\020\002\000\002\020\004\000\002\021" +
    "\006\000\002\021\007\000\002\021\007\000\002\021\007" +
    "\000\002\021\003\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\014\002\ufffc\003\004\034\010\035\005\051" +
    "\006\001\002\000\006\003\011\030\012\001\002\000\006" +
    "\003\011\030\012\001\002\000\006\003\272\030\273\001" +
    "\002\000\004\002\270\001\002\000\006\003\011\030\012" +
    "\001\002\000\012\003\260\026\015\031\252\033\247\001" +
    "\002\000\010\003\016\026\015\031\017\001\002\000\004" +
    "\002\uffff\001\002\000\010\003\250\031\252\033\247\001" +
    "\002\000\004\036\242\001\002\000\010\003\021\033\020" +
    "\042\023\001\002\000\004\002\uffec\001\002\000\014\037" +
    "\214\040\212\041\216\056\213\061\215\001\002\000\006" +
    "\003\026\030\027\001\002\000\010\003\uffe4\031\uffe4\033" +
    "\uffe4\001\002\000\004\032\025\001\002\000\012\003\uffdb" +
    "\027\uffdb\031\uffdb\033\uffdb\001\002\000\006\003\026\030" +
    "\027\001\002\000\012\003\205\026\032\031\uffd4\050\141" +
    "\001\002\000\010\003\033\026\032\031\uffd4\001\002\000" +
    "\012\003\uffda\027\uffda\031\uffda\033\uffda\001\002\000\004" +
    "\031\137\001\002\000\004\043\035\001\002\000\004\043" +
    "\035\001\002\000\004\031\uffd3\001\002\000\004\032\036" +
    "\001\002\000\004\045\037\001\002\000\006\027\042\033" +
    "\040\001\002\000\026\004\051\005\046\006\053\007\056" +
    "\010\050\021\047\022\052\023\057\024\054\025\055\001" +
    "\002\000\004\031\uffbb\001\002\000\006\031\uffb9\033\044" +
    "\001\002\000\004\031\uffca\001\002\000\010\003\033\026" +
    "\032\031\uffd4\001\002\000\004\031\uffba\001\002\000\004" +
    "\032\133\001\002\000\004\032\130\001\002\000\004\032" +
    "\125\001\002\000\004\032\120\001\002\000\004\032\113" +
    "\001\002\000\004\032\100\001\002\000\004\032\075\001" +
    "\002\000\004\032\070\001\002\000\004\032\063\001\002" +
    "\000\004\032\060\001\002\000\004\045\061\001\002\000" +
    "\006\027\042\033\040\001\002\000\004\031\uffbf\001\002" +
    "\000\006\044\064\045\065\001\002\000\006\027\042\033" +
    "\040\001\002\000\006\027\042\033\040\001\002\000\004" +
    "\031\uffc2\001\002\000\004\031\uffc3\001\002\000\006\044" +
    "\071\045\072\001\002\000\006\027\042\033\040\001\002" +
    "\000\006\027\042\033\040\001\002\000\004\031\uffbc\001" +
    "\002\000\004\031\uffbd\001\002\000\004\045\076\001\002" +
    "\000\006\027\042\033\040\001\002\000\004\031\uffbe\001" +
    "\002\000\022\011\106\012\101\013\107\014\105\015\102" +
    "\016\111\017\110\020\103\001\002\000\006\027\uffd1\033" +
    "\uffd1\001\002\000\006\027\uffce\033\uffce\001\002\000\006" +
    "\027\uffcb\033\uffcb\001\002\000\006\027\042\033\040\001" +
    "\002\000\006\027\uffcf\033\uffcf\001\002\000\006\027\uffd2" +
    "\033\uffd2\001\002\000\006\027\uffd0\033\uffd0\001\002\000" +
    "\006\027\uffcc\033\uffcc\001\002\000\006\027\uffcd\033\uffcd" +
    "\001\002\000\004\031\uffc6\001\002\000\006\044\114\045" +
    "\115\001\002\000\006\027\042\033\040\001\002\000\006" +
    "\027\042\033\040\001\002\000\004\031\uffc4\001\002\000" +
    "\004\031\uffc5\001\002\000\006\044\121\045\122\001\002" +
    "\000\006\027\042\033\040\001\002\000\006\027\042\033" +
    "\040\001\002\000\004\031\uffc8\001\002\000\004\031\uffc9" +
    "\001\002\000\004\047\126\001\002\000\006\027\042\033" +
    "\040\001\002\000\004\031\uffc1\001\002\000\004\046\131" +
    "\001\002\000\006\027\042\033\040\001\002\000\004\031" +
    "\uffc0\001\002\000\004\045\134\001\002\000\006\027\042" +
    "\033\040\001\002\000\004\031\uffc7\001\002\000\004\031" +
    "\uffd5\001\002\000\004\033\140\001\002\000\006\003\142" +
    "\050\141\001\002\000\004\032\202\001\002\000\006\003" +
    "\144\030\146\001\002\000\012\003\uffd8\027\uffd8\031\uffd8" +
    "\033\uffd8\001\002\000\010\003\150\026\147\031\uffb3\001" +
    "\002\000\012\003\uffb7\027\uffb7\031\uffb7\033\uffb7\001\002" +
    "\000\010\003\150\026\147\031\uffb3\001\002\000\010\004" +
    "\155\027\156\033\154\001\002\000\010\004\155\027\156" +
    "\033\154\001\002\000\004\031\152\001\002\000\012\003" +
    "\uffb6\027\uffb6\031\uffb6\033\uffb6\001\002\000\004\031\uffb2" +
    "\001\002\000\006\036\165\045\166\001\002\000\004\032" +
    "\162\001\002\000\006\031\uffab\033\160\001\002\000\004" +
    "\031\uffad\001\002\000\010\003\150\026\147\031\uffb3\001" +
    "\002\000\004\031\uffac\001\002\000\004\045\163\001\002" +
    "\000\010\004\155\027\156\033\154\001\002\000\004\031" +
    "\uffb1\001\002\000\004\032\174\001\002\000\004\032\167" +
    "\001\002\000\006\044\170\045\171\001\002\000\010\004" +
    "\155\027\156\033\154\001\002\000\010\004\155\027\156" +
    "\033\154\001\002\000\004\031\uffae\001\002\000\004\031" +
    "\uffaf\001\002\000\004\045\175\001\002\000\010\004\155" +
    "\027\156\033\154\001\002\000\004\031\uffb0\001\002\000" +
    "\004\031\uffb4\001\002\000\004\031\201\001\002\000\012" +
    "\003\uffb5\027\uffb5\031\uffb5\033\uffb5\001\002\000\006\003" +
    "\144\030\146\001\002\000\012\003\uffb8\027\uffb8\031\uffb8" +
    "\033\uffb8\001\002\000\004\031\207\001\002\000\010\003" +
    "\144\030\146\043\035\001\002\000\012\003\uffd6\027\uffd6" +
    "\031\uffd6\033\uffd6\001\002\000\006\003\142\050\141\001" +
    "\002\000\012\003\uffd7\027\uffd7\031\uffd7\033\uffd7\001\002" +
    "\000\012\003\uffd9\027\uffd9\031\uffd9\033\uffd9\001\002\000" +
    "\004\032\237\001\002\000\004\032\232\001\002\000\004" +
    "\032\225\001\002\000\004\032\222\001\002\000\004\032" +
    "\217\001\002\000\004\045\220\001\002\000\010\003\021" +
    "\033\020\042\023\001\002\000\012\003\uffdd\027\uffdd\031" +
    "\uffdd\033\uffdd\001\002\000\004\045\223\001\002\000\010" +
    "\003\021\033\020\042\023\001\002\000\012\003\uffdf\027" +
    "\uffdf\031\uffdf\033\uffdf\001\002\000\006\044\226\045\227" +
    "\001\002\000\010\003\021\033\020\042\023\001\002\000" +
    "\010\003\021\033\020\042\023\001\002\000\012\003\uffe0" +
    "\027\uffe0\031\uffe0\033\uffe0\001\002\000\012\003\uffe1\027" +
    "\uffe1\031\uffe1\033\uffe1\001\002\000\006\057\233\060\234" +
    "\001\002\000\010\003\uffe3\033\uffe3\042\uffe3\001\002\000" +
    "\010\003\uffe2\033\uffe2\042\uffe2\001\002\000\010\003\021" +
    "\033\020\042\023\001\002\000\012\003\uffdc\027\uffdc\031" +
    "\uffdc\033\uffdc\001\002\000\004\045\240\001\002\000\010" +
    "\003\021\033\020\042\023\001\002\000\012\003\uffde\027" +
    "\uffde\031\uffde\033\uffde\001\002\000\004\032\243\001\002" +
    "\000\004\045\244\001\002\000\010\003\021\033\020\042" +
    "\023\001\002\000\004\027\246\001\002\000\010\003\uffe5" +
    "\031\uffe5\033\uffe5\001\002\000\006\003\016\026\015\001" +
    "\002\000\010\002\uffe6\003\016\026\015\001\002\000\004" +
    "\002\uffed\001\002\000\004\002\uffe8\001\002\000\010\003" +
    "\250\031\252\033\247\001\002\000\004\002\uffe7\001\002" +
    "\000\010\003\250\031\252\033\247\001\002\000\004\002" +
    "\uffe9\001\002\000\010\003\250\031\252\033\247\001\002" +
    "\000\014\002\uffe6\003\262\026\015\033\020\042\023\001" +
    "\002\000\004\002\uffea\001\002\000\012\003\263\030\027" +
    "\033\020\042\023\001\002\000\014\003\264\026\032\030" +
    "\027\031\uffd4\050\141\001\002\000\016\003\265\026\032" +
    "\030\146\031\uffd4\043\035\050\141\001\002\000\014\003" +
    "\266\026\147\030\146\031\uffb3\043\035\001\002\000\016" +
    "\003\150\004\155\026\147\027\156\031\uffb3\033\154\001" +
    "\002\000\004\002\uffeb\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffd\001\002\000\010\003\275\026\274\031" +
    "\276\001\002\000\010\003\275\026\274\031\276\001\002" +
    "\000\006\003\300\052\301\001\002\000\006\003\300\052" +
    "\301\001\002\000\004\002\ufff7\001\002\000\004\002\ufffa" +
    "\001\002\000\006\027\314\033\313\001\002\000\004\032" +
    "\311\001\002\000\006\031\304\033\303\001\002\000\004" +
    "\026\306\001\002\000\004\002\ufff4\001\002\000\004\002" +
    "\ufff6\001\002\000\006\003\300\052\301\001\002\000\006" +
    "\031\304\033\303\001\002\000\004\002\ufff5\001\002\000" +
    "\004\045\312\001\002\000\006\027\314\033\313\001\002" +
    "\000\006\053\317\054\316\001\002\000\006\031\uffee\033" +
    "\uffee\001\002\000\006\031\ufff3\033\ufff3\001\002\000\004" +
    "\032\325\001\002\000\004\032\320\001\002\000\006\044" +
    "\321\045\322\001\002\000\006\027\314\033\313\001\002" +
    "\000\006\027\314\033\313\001\002\000\006\031\ufff0\033" +
    "\ufff0\001\002\000\006\031\ufff1\033\ufff1\001\002\000\004" +
    "\045\326\001\002\000\006\027\314\033\313\001\002\000" +
    "\006\031\uffef\033\uffef\001\002\000\006\031\ufff2\033\ufff2" +
    "\001\002\000\006\031\304\033\303\001\002\000\004\002" +
    "\ufff8\001\002\000\004\002\ufff9\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\002\006\001\001\000\004\004\334\001" +
    "\001\000\004\004\333\001\001\000\004\024\270\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\006\005" +
    "\260\006\256\001\001\000\004\006\013\001\001\000\002" +
    "\001\001\000\004\005\250\001\001\000\002\001\001\000" +
    "\006\007\021\010\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\027\001\001" +
    "\000\006\012\203\016\205\001\001\000\004\012\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\135" +
    "\001\001\000\004\023\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\042\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\061\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\066\015\040\001\001\000\006\014\065\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\073\015\040\001\001\000\006\014\072\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\076\015\040\001\001\000\002\001\001" +
    "\000\004\013\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\111\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\116\015\040\001\001\000\006\014" +
    "\115\015\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\123\015\040\001\001\000" +
    "\006\014\122\015\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\126\015\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\131" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\134\015\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\142\001\001\000" +
    "\002\001\001\000\004\017\144\001\001\000\002\001\001" +
    "\000\004\020\177\001\001\000\002\001\001\000\004\020" +
    "\150\001\001\000\006\021\176\022\156\001\001\000\006" +
    "\021\152\022\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\163" +
    "\022\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\172\022\156" +
    "\001\001\000\006\021\171\022\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\175" +
    "\022\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\144\023" +
    "\033\001\001\000\002\001\001\000\004\016\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\220\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\223" +
    "\010\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\230\010\023\001\001\000\006\007\227\010\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\235\010\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\240\010\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\244\010" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\254\001\001\000\004\006\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\253\001\001\000\002" +
    "\001\001\000\004\005\255\001\001\000\002\001\001\000" +
    "\004\005\266\001\001\000\010\006\252\007\021\010\023" +
    "\001\001\000\002\001\001\000\010\007\021\010\023\011" +
    "\210\001\001\000\010\011\210\012\203\016\205\001\001" +
    "\000\012\012\203\016\205\017\144\023\033\001\001\000" +
    "\010\017\144\020\177\023\033\001\001\000\010\020\177" +
    "\021\152\022\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\332\001\001\000\004" +
    "\025\276\001\001\000\004\027\330\001\001\000\004\027" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\327\001\001\000\002\001\001\000\004\026\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\306\001\001\000\004\026\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\323\001\001\000\004\030\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqFormSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqFormSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqFormSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    FormCommands formCommands = new FormCommands();
    UserCommands userCommands = new UserCommands();
    ComponentCommands componentCommands = new ComponentCommands();
    ErrorCommands errorCommands = new ErrorCommands(false);
    ResultCommands resultCommands = new ResultCommands();
    @Override
	public void syntax_error(Symbol symbol){
		/*
		//This code works better with report_error(String message, Object info) method
		if (info instanceof String){
			errors++; 
			System.err.println("  "+ errors + "==> " + info + " "+ message + 
							"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
		}
		else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol) 
			m.append( "("+info.toString()+")" );     
			m.append(" : "+message);   
			System.err.println(m);
		}*/
    	report_expected_token_ids();
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            String errorArmado="";
            TokenHandler tokenHandler = new TokenHandler();
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                errorArmado += tokenHandler.expectedFormIndigo(symbl_name_from_id(expected_token_ids().get(index)));
            }
            String error = "Se esperaba la forma: " + errorArmado;
			errorCommands.addError(new ErrorIndigo(error,token, line, column));
            System.out.println("Error en token:"+token+"\n"+error+" \n Linea: "+line+", Columna: "+column);
	}
	@Override
	public void unrecovered_syntax_error(Symbol symbol){
		syntax_error(symbol);
	}

    public UserCommands getUserCommands(){
        return userCommands;
    }

	public FormCommands getFormCommands(){
        return formCommands;
    }

    public ComponentCommands getComponentCommands(){
        return componentCommands;
    }
    public ErrorCommands getErrorCommands(){
        return errorCommands;
    }
    public ResultCommands getResultCommands(){
        return resultCommands;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqFormSyntax$actions {
  private final SqFormSyntax parser;

  /** Constructor */
  CUP$SqFormSyntax$actions(SqFormSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqFormSyntax$do_action_part00000000(
    int                        CUP$SqFormSyntax$act_num,
    java_cup.runtime.lr_parser CUP$SqFormSyntax$parser,
    java.util.Stack            CUP$SqFormSyntax$stack,
    int                        CUP$SqFormSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqFormSyntax$result;

      /* select the action based on the action number */
      switch (CUP$SqFormSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= doom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		RESULT = start_val;
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqFormSyntax$parser.done_parsing();
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initform ::= OPEN_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("initform",1, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // doom ::= DBFORM form 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("doom",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // doom ::= NEWFORM form 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("doom",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // doom ::= DBUSER user 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("doom",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // doom ::= 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("doom",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // doom ::= error form 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("doom",0, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // user ::= OPEN_PARENTHESIS user_struct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user",18, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // user ::= error user_struct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user",18, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // user_struct ::= OPEN_CURLY poyo user_newstruct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user_struct",19, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // user_struct ::= CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user_struct",19, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // user_struct ::= error poyo user_newstruct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user_struct",19, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // user_newstruct ::= COMA OPEN_CURLY poyo user_newstruct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user_newstruct",20, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // user_newstruct ::= CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("user_newstruct",20, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // poyo ::= USER COLON TEXT_NOSPACES poyo_reply 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 userCommands.addUser(String.valueOf(text).replace("\"","")); Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;userCommands.close(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo",21, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // poyo ::= error poyo_reply 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo",21, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // poyo_reply ::= COMA PASSWORD COLON TEXT_WITHSPACES poyo_reply 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 userCommands.addPassword(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo_reply",22, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // poyo_reply ::= COMA PASSWORD COLON TEXT_NOSPACES poyo_reply 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 userCommands.addPassword(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo_reply",22, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // poyo_reply ::= COMA DATE COLON TEXT_NOSPACES poyo_reply 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 
                Date date=new SimpleDateFormat("yyyy-MM-dd").parse(String.valueOf(text).replace("\"",""));  
                userCommands.addDate(date); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo_reply",22, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // poyo_reply ::= CLOSE_CURLY 
            {
              Object RESULT =null;
		 Symbol sym = cur_token;
                                int row = sym.left;
                                int column = sym.right;
                                userCommands.open(String.valueOf(sym.value),row,column); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("poyo_reply",22, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // form ::= OPEN_PARENTHESIS createform formp 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("form",2, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // form ::= OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("form",2, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // form ::= error createform formp 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("form",2, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // form ::= error formp 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("form",2, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formp ::= COMA createform formp 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("formp",3, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formp ::= CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("formp",3, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formp ::= error createform formp 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("formp",3, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formp ::= error 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("formp",3, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // createform ::= OPEN_CURLY IDFORM COLON TEXT_NOSPACES createform_p CLOSE_CURLY 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)).value;
		 Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;formCommands.addId(String.valueOf(text).replace("\"",""));formCommands.close(String.valueOf(sym.value),row,column); 
            
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform",4, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // createform ::= error createform_p 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform",4, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statevisibility ::= PUBLIC 
            {
              Object RESULT =null;
		 RESULT = "PUBLIC"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("statevisibility",23, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statevisibility ::= PRIVATE 
            {
              Object RESULT =null;
		 RESULT = "PRIVATE";
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("statevisibility",23, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // createform_p ::= COMA FORMTITTLE COLON TEXT_WITHSPACES createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 formCommands.addTittle(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // createform_p ::= COMA FORMTITTLE COLON TEXT_NOSPACES createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 formCommands.addTittle(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // createform_p ::= COMA NAME COLON TEXT_NOSPACES createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		formCommands.addName(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // createform_p ::= COMA TOPIC COLON TEXT_NOSPACES createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		formCommands.addTopic(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // createform_p ::= COMA USER_CREATOR COLON TEXT_NOSPACES createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		formCommands.addUser(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // createform_p ::= COMA VISIBILITY COLON statevisibility createform_p 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		formCommands.addVisibleText(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // createform_p ::= struct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("createform_p",5, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct ::= STRUCT COLON struct_value 
            {
              Object RESULT =null;
		 Symbol sym = cur_token;
                                        int row = sym.left;
                                        int column = sym.right;
                                        formCommands.start(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct",6, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct ::= error struct_value 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct",6, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_value ::= OPEN_PARENTHESIS struct_param CLOSE_PARENTHESIS COMA data 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_value",7, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_value ::= error struct_param CLOSE_PARENTHESIS data 
            {
              Object RESULT =null;
		System.out.println("Error en struct_value struct_param CLOSE_PARENTHESIS");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_value",7, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struct_value ::= error data 
            {
              Object RESULT =null;
		System.out.println("Error en struct_value data");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_value",7, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struct_param ::= OPEN_CURLY special_struct 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_param",8, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struct_param ::= 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_param",8, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struct_param ::= error special_struct 
            {
              Object RESULT =null;
		System.out.println("Error en struct_param");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_param",8, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classnames ::= TEXT_CAMP 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "CAMPO_TEXTO"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // classnames ::= TEXT_AREA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "AREA_TEXTO"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // classnames ::= CHECKBOX 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "CHECKBOX"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // classnames ::= RATIO 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "RADIO"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // classnames ::= FILE 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "FICHERO"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // classnames ::= IMAGE 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "IMAGEN"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // classnames ::= COMBO 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "COMBO"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // classnames ::= BUTTON 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.peek()).value;
		 RESULT = "BOTON"; 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("classnames",9, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // special_struct ::= ID_COMPONENT COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;componentCommands.addId(String.valueOf(text).replace("\"","")); componentCommands.close(String.valueOf(sym.value), row, column); 
            
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("special_struct",17, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_data ::= COMA NAME_C COLON TEXT_WITHSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addCampName(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_data ::= COMA NAME_C COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addCampName(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_data ::= COMA FORM COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addFormName(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_data ::= COMA CLASSN COLON classnames struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addClassName(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_data ::= COMA OPTIONS COLON TEXT_WITHSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addOptions(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_data ::= COMA OPTIONS COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addOptions(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_data ::= COMA TEXTV COLON TEXT_WITHSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addVisibleText(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_data ::= COMA TEXTV COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addVisibleText(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_data ::= COMA ALIGNMENT COLON POSALIGNMENT struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addAlign(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_data ::= COMA REQUIRED COLON BOOL struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		 componentCommands.addRequired(String.valueOf(text).replace("\"","")); 
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_data ::= COMA ROWS COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addRows(String.valueOf(number).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_data ::= COMA COLS COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addCols(String.valueOf(number).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_data ::= COMA URL COLON TEXT_WITHSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addUrl(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_data ::= COMA URL COLON TEXT_NOSPACES struct_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		componentCommands.addUrl(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_data ::= newstruct_param 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("struct_data",10, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // newstruct_param ::= CLOSE_CURLY COMA struct_param 
            {
              Object RESULT =null;
		Symbol sym=cur_token;
                                                                                int row = sym.left;
                                                                                int column = sym.right;
                                                                                componentCommands.start(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("newstruct_param",11, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // newstruct_param ::= CLOSE_CURLY 
            {
              Object RESULT =null;
		Symbol sym=cur_token;
                                        int row = sym.left;
                                        int column = sym.right;
                                        componentCommands.start(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("newstruct_param",11, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // data ::= DATA COLON data_value 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data",12, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // data ::= error data_value 
            {
              Object RESULT =null;
		System.out.println("Error en data");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data",12, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // data_value ::= OPEN_PARENTHESIS data_param CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_value",13, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // data_value ::= error data_param CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		System.out.println("Error en data_value");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_value",13, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // data_param ::= OPEN_CURLY data_data 
            {
              Object RESULT =null;
		Symbol sym = cur_token;
            int row = sym.left;
            int column = sym.right;resultCommands.close(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_param",14, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // data_param ::= 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_param",14, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // data_param ::= error data_data 
            {
              Object RESULT =null;
		System.out.println("Error en data_param");
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_param",14, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // data_data ::= NAME_C COLON TEXT_NOSPACES data_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		resultCommands.addNameCamp(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_data",15, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // data_data ::= COMA IDFORM COLON TEXT_NOSPACES data_data 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		resultCommands.addIdForm(String.valueOf(text).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_data",15, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // data_data ::= COMA TEXT_NOSPACES COLON TEXT_WITHSPACES data_data 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).value;
		int contextleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int contextright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object context = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		resultCommands.addAnswer(String.valueOf(id).replace("\"",""),String.valueOf(context).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_data",15, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // data_data ::= COMA TEXT_NOSPACES COLON TEXT_NOSPACES data_data 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-3)).value;
		int contextleft = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).left;
		int contextright = ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).right;
		Object context = (Object)((java_cup.runtime.Symbol) CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-1)).value;
		resultCommands.addAnswer(String.valueOf(id).replace("\"",""),String.valueOf(context).replace("\"",""));
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_data",15, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // data_data ::= newdata_param 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("data_data",15, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // newdata_param ::= CLOSE_CURLY COMA data_param 
            {
              Object RESULT =null;
		Symbol sym = cur_token;
                                                                        int row = sym.left;
                                                                        int column = sym.right;
                                                                        resultCommands.newResult(String.valueOf(sym.value),row,column);
              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("newdata_param",16, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.elementAt(CUP$SqFormSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // newdata_param ::= CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$SqFormSyntax$result = parser.getSymbolFactory().newSymbol("newdata_param",16, ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqFormSyntax$stack.peek()), RESULT);
            }
          return CUP$SqFormSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqFormSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqFormSyntax$do_action(
    int                        CUP$SqFormSyntax$act_num,
    java_cup.runtime.lr_parser CUP$SqFormSyntax$parser,
    java.util.Stack            CUP$SqFormSyntax$stack,
    int                        CUP$SqFormSyntax$top)
    throws java.lang.Exception
    {
              return CUP$SqFormSyntax$do_action_part00000000(
                               CUP$SqFormSyntax$act_num,
                               CUP$SqFormSyntax$parser,
                               CUP$SqFormSyntax$stack,
                               CUP$SqFormSyntax$top);
    }
}

}
